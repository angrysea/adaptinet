// Title:        GetSwapTransactionRequest
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class GetSwapTransactionRequest implements FastCacheDVOBase  {
	public Date getdateValueFrom() { 
		return _dateValueFrom;
	}
	public void setdateValueFrom(Date newValue) { 
		_dateValueFrom = newValue;
	}
	public Date getdateValueTo() { 
		return _dateValueTo;
	}
	public void setdateValueTo(Date newValue) { 
		_dateValueTo = newValue;
	}
	public int getlocation() {
		return _location;
	}
	public void setlocation(int newValue) {
		_location = newValue;
	}
	public int getswapNum() {
		return _swapNum;
	}
	public void setswapNum(int newValue) {
		_swapNum = newValue;
	}
	public String getinstrId() {
		if(_instrId!=null) {
			return new String(_instrId);
		}
		else {
			return null;
		}
	}
	public void setinstrId(String newValue) {
		_instrId = newValue!=null ? newValue.toCharArray() : null;
	}
	public String geteventType() {
		if(_eventType!=null) {
			return new String(_eventType);
		}
		else {
			return null;
		}
	}
	public void seteventType(String newValue) {
		_eventType = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getdateType() {
		if(_dateType!=null) {
			return new String(_dateType);
		}
		else {
			return null;
		}
	}
	public void setdateType(String newValue) {
		_dateType = newValue!=null ? newValue.toCharArray() : null;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 7);
		item.putDate(_dateValueFrom);
		da.setDataItem(sa_idx++, item);
		item.putDate(_dateValueTo);
		da.setDataItem(sa_idx++, item);
		item.putInt(_location);
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapNum);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_instrId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_eventType);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_dateType);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_dateValueFrom = item.getDate();
		in.getDataItem(sa_idx++, item);
		_dateValueTo = item.getDate();
		in.getDataItem(sa_idx++, item);
		_location = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapNum = item.getInt();
		in.getDataItem(sa_idx++, item);
		_instrId = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_eventType = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_dateType = item.getCharArray();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _dateValueFrom =  new Date();
	private Date _dateValueTo =  new Date();
	private int _location;
	private int _swapNum;
	private char[] _instrId;
	private char[] _eventType;
	private char[] _dateType;
	private DataItem item = new DataItem();
}

