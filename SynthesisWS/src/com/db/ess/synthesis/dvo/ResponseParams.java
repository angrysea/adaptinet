// Title:        ResponseParams
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class ResponseParams implements FastCacheDVOBase  {
	public long getexceptionIDParamCount() { 
		return _exceptionIDParamCount;
	}
	public Integer[] getexceptionIDParamArray() { 
		return _exceptionIDParam;
	}
	public void setexceptionIDParamArray(Integer newValue[]) { 
		_exceptionIDParam=newValue;
	}
	@SuppressWarnings("rawtypes")
	public Iterator getexceptionIDParamIterator() { 
		return new Iterator() {
			int cursor=0;
			int last=-1;
			public boolean hasNext() {
				if(_exceptionIDParam==null) return false;
				if(last<0) {
					last = _exceptionIDParam.length;
					while(--last>-1&&_exceptionIDParam[last]==null);
					last++;
				}
				return cursor!=last;
			}
			public Object next() {
				try {
					return _exceptionIDParam[cursor++];
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
			public void remove() {
				try {
					_exceptionIDParam[cursor++]=null;
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
		};
	}
	public int getexceptionIDParam(int idx) { 
		return _exceptionIDParam[idx].intValue();
	}
	public void setexceptionIDParam(int newValue) { 
		if(_exceptionIDParam!=null) {
			int __OPEN_A=-1;
			for(int __I_A=0;__I_A<_exceptionIDParam.length;__I_A++) {
				if(_exceptionIDParam[__I_A]==null) {
					__OPEN_A=__I_A;
					break;
				}
			}
			if(__OPEN_A<0) {
				__OPEN_A=_exceptionIDParam.length;
				Integer array[] = new Integer[__OPEN_A+10];
				System.arraycopy(_exceptionIDParam,0,array,0,_exceptionIDParam.length);
				_exceptionIDParam = array;
			}
			_exceptionIDParam[__OPEN_A] = new Integer(newValue);
		}
		else {
			_exceptionIDParam = new Integer[10];
			_exceptionIDParam[0] = Integer.valueOf(newValue);
		}
	}
	public int getswapNumber() {
		return _swapNumber;
	}
	public void setswapNumber(int newValue) {
		_swapNumber = newValue;
	}
	public boolean getswapNumberHasError() {
		return _swapNumberHasError;
	}
	public void setswapNumberHasError(boolean newValue) {
		_swapNumberHasError = newValue;
	}
	public int getlegalEntity() {
		return _legalEntity;
	}
	public void setlegalEntity(int newValue) {
		_legalEntity = newValue;
	}
	public boolean getlegalEntityHasError() {
		return _legalEntityHasError;
	}
	public void setlegalEntityHasError(boolean newValue) {
		_legalEntityHasError = newValue;
	}
	public String getticker() {
		if(_ticker!=null) {
			return new String(_ticker);
		}
		else {
			return null;
		}
	}
	public void setticker(String newValue) {
		_ticker = newValue!=null ? newValue.toCharArray() : null;
	}
	public boolean gettickerHasError() {
		return _tickerHasError;
	}
	public void settickerHasError(boolean newValue) {
		_tickerHasError = newValue;
	}
	public boolean getisBTB() {
		return _isBTB;
	}
	public void setisBTB(boolean newValue) {
		_isBTB = newValue;
	}
	public boolean getisActionAccess() {
		return _isActionAccess;
	}
	public void setisActionAccess(boolean newValue) {
		_isActionAccess = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 9);
		if(_exceptionIDParam!=null) {
			DataArray daChild = new DataArray(DataItem.DATAITEMARRAY, _exceptionIDParamCount);
			for(int __I_A=0;__I_A<_exceptionIDParamCount;__I_A++) {
				daChild.setInt(__I_A, _exceptionIDParam[__I_A]);
			}
			item.putDataArray(daChild);
		}
		else {
			item.putEmpty();
		}
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapNumber);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_swapNumberHasError);
		da.setDataItem(sa_idx++, item);
		item.putInt(_legalEntity);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_legalEntityHasError);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ticker);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_tickerHasError);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_isBTB);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_isActionAccess);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		DataArray daItem = new DataArray();
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_exceptionIDParamCount = daItem.getElements();
		if(_exceptionIDParamCount>0) {
			_exceptionIDParam = new Integer [(int)_exceptionIDParamCount];
			for(int __I_A=0;__I_A<_exceptionIDParamCount;__I_A++) {
				_exceptionIDParam[__I_A] = new Integer(daItem.getInt(__I_A));
			}
		}
		in.getDataItem(sa_idx++, item);
		_swapNumber = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapNumberHasError = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_legalEntity = item.getInt();
		in.getDataItem(sa_idx++, item);
		_legalEntityHasError = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_ticker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_tickerHasError = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_isBTB = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_isActionAccess = item.getBoolean();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Integer _exceptionIDParam[] = null;
	private long _exceptionIDParamCount = 0;
	private int _swapNumber;
	private boolean _swapNumberHasError;
	private int _legalEntity;
	private boolean _legalEntityHasError;
	private char[] _ticker;
	private boolean _tickerHasError;
	private boolean _isBTB;
	private boolean _isActionAccess;
	private DataItem item = new DataItem();
}

