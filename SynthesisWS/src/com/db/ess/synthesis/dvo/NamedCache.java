// Title:        NamedCache
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class NamedCache implements FastCacheDVOBase  {
	public long getentryCount() { 
		return _entryCount;
	}
	public CacheEntry[] getentryArray() { 
		return _entry;
	}
	public void setentryArray(CacheEntry newValue[]) { 
		_entry=newValue;
	}
	@SuppressWarnings("rawtypes")
	public Iterator getentryIterator() { 
		return new Iterator() {
			int cursor=0;
			int last=-1;
			public boolean hasNext() {
				if(_entry==null) return false;
				if(last<0) {
					last = _entry.length;
					while(--last>-1&&_entry[last]==null);
					last++;
				}
				return cursor!=last;
			}
			public Object next() {
				try {
					return _entry[cursor++];
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
			public void remove() {
				try {
					_entry[cursor++]=null;
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
		};
	}
	public CacheEntry getentry(int idx) { 
		return (CacheEntry)_entry[idx];
	}
	public void setentry(CacheEntry newValue) { 
		if(_entry!=null) {
			int __OPEN_A=-1;
			for(int __I_A=0;__I_A<_entry.length;__I_A++) {
				if(_entry[__I_A]==null) {
					__OPEN_A=__I_A;
					break;
				}
			}
			if(__OPEN_A<0) {
				__OPEN_A=_entry.length;
				CacheEntry array[] = new CacheEntry[__OPEN_A+10];
				System.arraycopy(_entry,0,array,0,_entry.length);
				_entry = array;
			}
			_entry[__OPEN_A] = newValue;
		}
		else {
			_entry = new CacheEntry[10];
			_entry[0] = newValue;
		}
		_entryCount++;
	}
	public String getname() {
		if(_name!=null) {
			return new String(_name);
		}
		else {
			return null;
		}
	}
	public void setname(String newValue) {
		_name = newValue!=null ? newValue.toCharArray() : null;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 2);
		if(_entry!=null) {
			DataArray daChild = new DataArray(DataItem.DATAITEMARRAY, _entryCount);
			for(int __I_A=0;__I_A<_entryCount;__I_A++) {
				daChild.setDataArray(__I_A, _entry[__I_A].writeCache());
			}
			item.putDataArray(daChild);
		}
		else {
			item.putEmpty();
		}
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_name);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		DataArray daItem = new DataArray();
		DataArray daElement = new DataArray();
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_entryCount = daItem.getElements();
		if(_entryCount>0) {
			_entry = new CacheEntry [(int)_entryCount];
			for(int __I_A=0;__I_A<_entryCount;__I_A++) {
				_entry[__I_A] = new CacheEntry();
				daItem.getDataArray(__I_A, daElement);
				_entry[__I_A].readCache(daElement);
			}
		}
		in.getDataItem(sa_idx++, item);
		_name = item.getCharArray();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private CacheEntry _entry[] = null;
	private long _entryCount = 0;
	private char[] _name;
	private DataItem item = new DataItem();
}

