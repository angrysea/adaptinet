// Title:        DividendAudit
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class DividendAudit implements FastCacheDVOBase  {
	public Date getexDate() { 
		return _exDate;
	}
	public void setexDate(Date newValue) { 
		_exDate = newValue;
	}
	public Date getrecordDate() { 
		return _recordDate;
	}
	public void setrecordDate(Date newValue) { 
		_recordDate = newValue;
	}
	public Date getpaymentDate() { 
		return _paymentDate;
	}
	public void setpaymentDate(Date newValue) { 
		_paymentDate = newValue;
	}
	public Date getchangeApplyTime() { 
		return _changeApplyTime;
	}
	public void setchangeApplyTime(Date newValue) { 
		_changeApplyTime = newValue;
	}
	public String getactionType() {
		if(_actionType!=null) {
			return new String(_actionType);
		}
		else {
			return null;
		}
	}
	public void setactionType(String newValue) {
		_actionType = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getchangeDescription() {
		if(_changeDescription!=null) {
			return new String(_changeDescription);
		}
		else {
			return null;
		}
	}
	public void setchangeDescription(String newValue) {
		_changeDescription = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getunderlyingTicker() {
		if(_underlyingTicker!=null) {
			return new String(_underlyingTicker);
		}
		else {
			return null;
		}
	}
	public void setunderlyingTicker(String newValue) {
		_underlyingTicker = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getticker() {
		if(_ticker!=null) {
			return new String(_ticker);
		}
		else {
			return null;
		}
	}
	public void setticker(String newValue) {
		_ticker = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getdivCurrency() {
		if(_divCurrency!=null) {
			return new String(_divCurrency);
		}
		else {
			return null;
		}
	}
	public void setdivCurrency(String newValue) {
		_divCurrency = newValue!=null ? newValue.toCharArray() : null;
	}
	public float getdivGrossRate() {
		return _divGrossRate;
	}
	public void setdivGrossRate(float newValue) {
		_divGrossRate = newValue;
	}
	public float getdivNetRate() {
		return _divNetRate;
	}
	public void setdivNetRate(float newValue) {
		_divNetRate = newValue;
	}
	public String getdivSource() {
		if(_divSource!=null) {
			return new String(_divSource);
		}
		else {
			return null;
		}
	}
	public void setdivSource(String newValue) {
		_divSource = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getfeedId() {
		if(_feedId!=null) {
			return new String(_feedId);
		}
		else {
			return null;
		}
	}
	public void setfeedId(String newValue) {
		_feedId = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getuserComments() {
		if(_userComments!=null) {
			return new String(_userComments);
		}
		else {
			return null;
		}
	}
	public void setuserComments(String newValue) {
		_userComments = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getuserIdApply() {
		if(_userIdApply!=null) {
			return new String(_userIdApply);
		}
		else {
			return null;
		}
	}
	public void setuserIdApply(String newValue) {
		_userIdApply = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getfeedVendorComment() {
		if(_feedVendorComment!=null) {
			return new String(_feedVendorComment);
		}
		else {
			return null;
		}
	}
	public void setfeedVendorComment(String newValue) {
		_feedVendorComment = newValue!=null ? newValue.toCharArray() : null;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 16);
		item.putDate(_exDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_recordDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_paymentDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_changeApplyTime);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_actionType);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_changeDescription);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_underlyingTicker);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ticker);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_divCurrency);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_divGrossRate);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_divNetRate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_divSource);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_feedId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_userComments);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_userIdApply);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_feedVendorComment);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_exDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_recordDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_paymentDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_changeApplyTime = item.getDate();
		in.getDataItem(sa_idx++, item);
		_actionType = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_changeDescription = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_underlyingTicker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_ticker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_divCurrency = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_divGrossRate = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_divNetRate = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_divSource = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_feedId = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_userComments = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_userIdApply = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_feedVendorComment = item.getCharArray();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _exDate =  new Date();
	private Date _recordDate =  new Date();
	private Date _paymentDate =  new Date();
	private Date _changeApplyTime =  new Date();
	private char[] _actionType;
	private char[] _changeDescription;
	private char[] _underlyingTicker;
	private char[] _ticker;
	private char[] _divCurrency;
	private float _divGrossRate;
	private float _divNetRate;
	private char[] _divSource;
	private char[] _feedId;
	private char[] _userComments;
	private char[] _userIdApply;
	private char[] _feedVendorComment;
	private DataItem item = new DataItem();
}

