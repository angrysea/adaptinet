// Title:        GetEligibleOpeningTradesRequest
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class GetEligibleOpeningTradesRequest implements FastCacheDVOBase  {
	public String gettradeDate() {
		if(_tradeDate!=null) {
			return new String(_tradeDate);
		}
		else {
			return null;
		}
	}
	public void settradeDate(String newValue) {
		_tradeDate = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getsettleDate() {
		if(_settleDate!=null) {
			return new String(_settleDate);
		}
		else {
			return null;
		}
	}
	public void setsettleDate(String newValue) {
		_settleDate = newValue!=null ? newValue.toCharArray() : null;
	}
	public int geteventId() {
		return _eventId;
	}
	public void seteventId(int newValue) {
		_eventId = newValue;
	}
	public int getswapLegId() {
		return _swapLegId;
	}
	public void setswapLegId(int newValue) {
		_swapLegId = newValue;
	}
	public int getinstrId() {
		return _instrId;
	}
	public void setinstrId(int newValue) {
		_instrId = newValue;
	}
	public int getuserId() {
		return _userId;
	}
	public void setuserId(int newValue) {
		_userId = newValue;
	}
	public int getlocation() {
		return _location;
	}
	public void setlocation(int newValue) {
		_location = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 7);
		item.putCharArray(_tradeDate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_settleDate);
		da.setDataItem(sa_idx++, item);
		item.putInt(_eventId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapLegId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_instrId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_userId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_location);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_tradeDate = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_settleDate = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_eventId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapLegId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_instrId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_userId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_location = item.getInt();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private char[] _tradeDate;
	private char[] _settleDate;
	private int _eventId;
	private int _swapLegId;
	private int _instrId;
	private int _userId;
	private int _location;
	private DataItem item = new DataItem();
}

