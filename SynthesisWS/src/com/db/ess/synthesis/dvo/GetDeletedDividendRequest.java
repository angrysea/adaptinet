// Title:        GetDeletedDividendRequest
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class GetDeletedDividendRequest implements FastCacheDVOBase  {
	public Date getexDate() { 
		return _exDate;
	}
	public void setexDate(Date newValue) { 
		_exDate = newValue;
	}
	public Date getrecDate() { 
		return _recDate;
	}
	public void setrecDate(Date newValue) { 
		_recDate = newValue;
	}
	public Date getpayDate() { 
		return _payDate;
	}
	public void setpayDate(Date newValue) { 
		_payDate = newValue;
	}
	public Date getannDate() { 
		return _annDate;
	}
	public void setannDate(Date newValue) { 
		_annDate = newValue;
	}
	public String getfeedId() {
		if(_feedId!=null) {
			return new String(_feedId);
		}
		else {
			return null;
		}
	}
	public void setfeedId(String newValue) {
		_feedId = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getunderlyingId() {
		return _underlyingId;
	}
	public void setunderlyingId(int newValue) {
		_underlyingId = newValue;
	}
	public int getinstrId() {
		return _instrId;
	}
	public void setinstrId(int newValue) {
		_instrId = newValue;
	}
	public String getdivSource() {
		if(_divSource!=null) {
			return new String(_divSource);
		}
		else {
			return null;
		}
	}
	public void setdivSource(String newValue) {
		_divSource = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getcurrency() {
		if(_currency!=null) {
			return new String(_currency);
		}
		else {
			return null;
		}
	}
	public void setcurrency(String newValue) {
		_currency = newValue!=null ? newValue.toCharArray() : null;
	}
	public float getunderDivRate() {
		return _underDivRate;
	}
	public void setunderDivRate(float newValue) {
		_underDivRate = newValue;
	}
	public String gettaxRate() {
		if(_taxRate!=null) {
			return new String(_taxRate);
		}
		else {
			return null;
		}
	}
	public void settaxRate(String newValue) {
		_taxRate = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getcomment() {
		if(_comment!=null) {
			return new String(_comment);
		}
		else {
			return null;
		}
	}
	public void setcomment(String newValue) {
		_comment = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getlocation() {
		return _location;
	}
	public void setlocation(int newValue) {
		_location = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 13);
		item.putDate(_exDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_recDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_payDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_annDate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_feedId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_underlyingId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_instrId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_divSource);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_currency);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_underDivRate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_taxRate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_comment);
		da.setDataItem(sa_idx++, item);
		item.putInt(_location);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_exDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_recDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_payDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_annDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_feedId = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_underlyingId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_instrId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_divSource = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_currency = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_underDivRate = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_taxRate = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_comment = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_location = item.getInt();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _exDate =  new Date();
	private Date _recDate =  new Date();
	private Date _payDate =  new Date();
	private Date _annDate =  new Date();
	private char[] _feedId;
	private int _underlyingId;
	private int _instrId;
	private char[] _divSource;
	private char[] _currency;
	private float _underDivRate;
	private char[] _taxRate;
	private char[] _comment;
	private int _location;
	private DataItem item = new DataItem();
}

