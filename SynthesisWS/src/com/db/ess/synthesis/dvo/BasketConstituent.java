// Title:        BasketConstituent
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class BasketConstituent implements FastCacheDVOBase  {
	public Date getSecurityPriceDate() { 
		return _SecurityPriceDate;
	}
	public void setSecurityPriceDate(Date newValue) { 
		_SecurityPriceDate = newValue;
	}
	public Date getSecurityFXDate() { 
		return _SecurityFXDate;
	}
	public void setSecurityFXDate(Date newValue) { 
		_SecurityFXDate = newValue;
	}
	public String getSecurityName() {
		if(_SecurityName!=null) {
			return new String(_SecurityName);
		}
		else {
			return null;
		}
	}
	public void setSecurityName(String newValue) {
		_SecurityName = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getSecurityType() {
		if(_SecurityType!=null) {
			return new String(_SecurityType);
		}
		else {
			return null;
		}
	}
	public void setSecurityType(String newValue) {
		_SecurityType = newValue!=null ? newValue.toCharArray() : null;
	}
	public double getSecurityFXRate() {
		return _SecurityFXRate;
	}
	public void setSecurityFXRate(double newValue) {
		_SecurityFXRate = newValue;
	}
	public String getSecurityCurrency() {
		if(_SecurityCurrency!=null) {
			return new String(_SecurityCurrency);
		}
		else {
			return null;
		}
	}
	public void setSecurityCurrency(String newValue) {
		_SecurityCurrency = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getReutersRic() {
		if(_ReutersRic!=null) {
			return new String(_ReutersRic);
		}
		else {
			return null;
		}
	}
	public void setReutersRic(String newValue) {
		_ReutersRic = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getBloombergTicker() {
		if(_BloombergTicker!=null) {
			return new String(_BloombergTicker);
		}
		else {
			return null;
		}
	}
	public void setBloombergTicker(String newValue) {
		_BloombergTicker = newValue!=null ? newValue.toCharArray() : null;
	}
	public double getSecurityPrice() {
		return _SecurityPrice;
	}
	public void setSecurityPrice(double newValue) {
		_SecurityPrice = newValue;
	}
	public double getUnitHoldings() {
		return _UnitHoldings;
	}
	public void setUnitHoldings(double newValue) {
		_UnitHoldings = newValue;
	}
	public double getPercentageWeight() {
		return _PercentageWeight;
	}
	public void setPercentageWeight(double newValue) {
		_PercentageWeight = newValue;
	}
	public int getIsPriceAndFXProvided() {
		return _IsPriceAndFXProvided;
	}
	public void setIsPriceAndFXProvided(int newValue) {
		_IsPriceAndFXProvided = newValue;
	}
	public double getImpliedUnits() {
		return _ImpliedUnits;
	}
	public void setImpliedUnits(double newValue) {
		_ImpliedUnits = newValue;
	}
	public double getImpliedWeights() {
		return _ImpliedWeights;
	}
	public void setImpliedWeights(double newValue) {
		_ImpliedWeights = newValue;
	}
	public double getInitialLevel() {
		return _InitialLevel;
	}
	public void setInitialLevel(double newValue) {
		_InitialLevel = newValue;
	}
	public double getCurrentLevel() {
		return _CurrentLevel;
	}
	public void setCurrentLevel(double newValue) {
		_CurrentLevel = newValue;
	}
	public double getLiveAdvPercent() {
		return _LiveAdvPercent;
	}
	public void setLiveAdvPercent(double newValue) {
		_LiveAdvPercent = newValue;
	}
	public double getThirtyDayAV() {
		return _ThirtyDayAV;
	}
	public void setThirtyDayAV(double newValue) {
		_ThirtyDayAV = newValue;
	}
	public double getSecurityLivePrice() {
		return _SecurityLivePrice;
	}
	public void setSecurityLivePrice(double newValue) {
		_SecurityLivePrice = newValue;
	}
	public double getInvestmentUnit() {
		return _InvestmentUnit;
	}
	public void setInvestmentUnit(double newValue) {
		_InvestmentUnit = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 20);
		item.putDate(_SecurityPriceDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_SecurityFXDate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_SecurityName);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_SecurityType);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_SecurityFXRate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_SecurityCurrency);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ReutersRic);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_BloombergTicker);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_SecurityPrice);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_UnitHoldings);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_PercentageWeight);
		da.setDataItem(sa_idx++, item);
		item.putInt(_IsPriceAndFXProvided);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_ImpliedUnits);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_ImpliedWeights);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_InitialLevel);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_CurrentLevel);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_LiveAdvPercent);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_ThirtyDayAV);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_SecurityLivePrice);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_InvestmentUnit);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_SecurityPriceDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_SecurityFXDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_SecurityName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_SecurityType = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_SecurityFXRate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_SecurityCurrency = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_ReutersRic = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_BloombergTicker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_SecurityPrice = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_UnitHoldings = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_PercentageWeight = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_IsPriceAndFXProvided = item.getInt();
		in.getDataItem(sa_idx++, item);
		_ImpliedUnits = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_ImpliedWeights = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_InitialLevel = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_CurrentLevel = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_LiveAdvPercent = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_ThirtyDayAV = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_SecurityLivePrice = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_InvestmentUnit = item.getDouble();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _SecurityPriceDate =  new Date();
	private Date _SecurityFXDate =  new Date();
	private char[] _SecurityName;
	private char[] _SecurityType;
	private double _SecurityFXRate;
	private char[] _SecurityCurrency;
	private char[] _ReutersRic;
	private char[] _BloombergTicker;
	private double _SecurityPrice;
	private double _UnitHoldings;
	private double _PercentageWeight;
	private int _IsPriceAndFXProvided;
	private double _ImpliedUnits;
	private double _ImpliedWeights;
	private double _InitialLevel;
	private double _CurrentLevel;
	private double _LiveAdvPercent;
	private double _ThirtyDayAV;
	private double _SecurityLivePrice;
	private double _InvestmentUnit;
	private DataItem item = new DataItem();
}

