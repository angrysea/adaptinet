// Title:        Trade
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class Trade implements FastCacheDVOBase  {
	public Date getenterTime() { 
		return _enterTime;
	}
	public void setenterTime(Date newValue) { 
		_enterTime = newValue;
	}
	public Date getsettleDate() { 
		return _settleDate;
	}
	public void setsettleDate(Date newValue) { 
		_settleDate = newValue;
	}
	public Date getswapMaturity() { 
		return _swapMaturity;
	}
	public void setswapMaturity(Date newValue) { 
		_swapMaturity = newValue;
	}
	public Date gettradeDate() { 
		return _tradeDate;
	}
	public void settradeDate(Date newValue) { 
		_tradeDate = newValue;
	}
	public Date gettaxlotMaturityDate() { 
		return _taxlotMaturityDate;
	}
	public void settaxlotMaturityDate(Date newValue) { 
		_taxlotMaturityDate = newValue;
	}
	public Date getlastexDate() { 
		return _lastexDate;
	}
	public void setlastexDate(Date newValue) { 
		_lastexDate = newValue;
	}
	public String getaccountName() {
		if(_accountName!=null) {
			return new String(_accountName);
		}
		else {
			return null;
		}
	}
	public void setaccountName(String newValue) {
		_accountName = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getbusinessUnitName() {
		if(_businessUnitName!=null) {
			return new String(_businessUnitName);
		}
		else {
			return null;
		}
	}
	public void setbusinessUnitName(String newValue) {
		_businessUnitName = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getdeskName() {
		if(_deskName!=null) {
			return new String(_deskName);
		}
		else {
			return null;
		}
	}
	public void setdeskName(String newValue) {
		_deskName = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getinstitutionName() {
		if(_institutionName!=null) {
			return new String(_institutionName);
		}
		else {
			return null;
		}
	}
	public void setinstitutionName(String newValue) {
		_institutionName = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getbookName() {
		if(_bookName!=null) {
			return new String(_bookName);
		}
		else {
			return null;
		}
	}
	public void setbookName(String newValue) {
		_bookName = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getcustomerName() {
		if(_customerName!=null) {
			return new String(_customerName);
		}
		else {
			return null;
		}
	}
	public void setcustomerName(String newValue) {
		_customerName = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getswapId() {
		return _swapId;
	}
	public void setswapId(int newValue) {
		_swapId = newValue;
	}
	public int getswapNumber() {
		return _swapNumber;
	}
	public void setswapNumber(int newValue) {
		_swapNumber = newValue;
	}
	public int getorigswapNumber() {
		return _origswapNumber;
	}
	public void setorigswapNumber(int newValue) {
		_origswapNumber = newValue;
	}
	public int getlegId() {
		return _legId;
	}
	public void setlegId(int newValue) {
		_legId = newValue;
	}
	public int getlegNumber() {
		return _legNumber;
	}
	public void setlegNumber(int newValue) {
		_legNumber = newValue;
	}
	public int getmultiplier() {
		return _multiplier;
	}
	public void setmultiplier(int newValue) {
		_multiplier = newValue;
	}
	public double getquantity() {
		return _quantity;
	}
	public void setquantity(double newValue) {
		_quantity = newValue;
	}
	public int gettradeId() {
		return _tradeId;
	}
	public void settradeId(int newValue) {
		_tradeId = newValue;
	}
	public int geteventId() {
		return _eventId;
	}
	public void seteventId(int newValue) {
		_eventId = newValue;
	}
	public String geteventTypeCode() {
		if(_eventTypeCode!=null) {
			return new String(_eventTypeCode);
		}
		else {
			return null;
		}
	}
	public void seteventTypeCode(String newValue) {
		_eventTypeCode = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getlongShort() {
		return _longShort;
	}
	public void setlongShort(int newValue) {
		_longShort = newValue;
	}
	public double getfxRate() {
		return _fxRate;
	}
	public void setfxRate(double newValue) {
		_fxRate = newValue;
	}
	public double getintRate() {
		return _intRate;
	}
	public void setintRate(double newValue) {
		_intRate = newValue;
	}
	public double getcloseQuantity() {
		return _closeQuantity;
	}
	public void setcloseQuantity(double newValue) {
		_closeQuantity = newValue;
	}
	public double getopenQuantity() {
		return _openQuantity;
	}
	public void setopenQuantity(double newValue) {
		_openQuantity = newValue;
	}
	public double getshortQuantity() {
		return _shortQuantity;
	}
	public void setshortQuantity(double newValue) {
		_shortQuantity = newValue;
	}
	public double getlongQuantity() {
		return _longQuantity;
	}
	public void setlongQuantity(double newValue) {
		_longQuantity = newValue;
	}
	public double getpriceBaseCcy() {
		return _priceBaseCcy;
	}
	public void setpriceBaseCcy(double newValue) {
		_priceBaseCcy = newValue;
	}
	public double getpricePayCcy() {
		return _pricePayCcy;
	}
	public void setpricePayCcy(double newValue) {
		_pricePayCcy = newValue;
	}
	public double gethedgeBasePrice() {
		return _hedgeBasePrice;
	}
	public void sethedgeBasePrice(double newValue) {
		_hedgeBasePrice = newValue;
	}
	public double gethedgePayPrice() {
		return _hedgePayPrice;
	}
	public void sethedgePayPrice(double newValue) {
		_hedgePayPrice = newValue;
	}
	public double getpayAmount() {
		return _payAmount;
	}
	public void setpayAmount(double newValue) {
		_payAmount = newValue;
	}
	public double getbaseAmount() {
		return _baseAmount;
	}
	public void setbaseAmount(double newValue) {
		_baseAmount = newValue;
	}
	public double getamortizedAmount() {
		return _amortizedAmount;
	}
	public void setamortizedAmount(double newValue) {
		_amortizedAmount = newValue;
	}
	public double getnotionalBaseCcy() {
		return _notionalBaseCcy;
	}
	public void setnotionalBaseCcy(double newValue) {
		_notionalBaseCcy = newValue;
	}
	public double getnotionalPayCcy() {
		return _notionalPayCcy;
	}
	public void setnotionalPayCcy(double newValue) {
		_notionalPayCcy = newValue;
	}
	public double getopenNotionalBaseCcy() {
		return _openNotionalBaseCcy;
	}
	public void setopenNotionalBaseCcy(double newValue) {
		_openNotionalBaseCcy = newValue;
	}
	public double getopenNotionalPayCcy() {
		return _openNotionalPayCcy;
	}
	public void setopenNotionalPayCcy(double newValue) {
		_openNotionalPayCcy = newValue;
	}
	public double getlongNotionalBaseCcy() {
		return _longNotionalBaseCcy;
	}
	public void setlongNotionalBaseCcy(double newValue) {
		_longNotionalBaseCcy = newValue;
	}
	public double getlongNotionalPayCcy() {
		return _longNotionalPayCcy;
	}
	public void setlongNotionalPayCcy(double newValue) {
		_longNotionalPayCcy = newValue;
	}
	public double getcloseNotionalBaseCcy() {
		return _closeNotionalBaseCcy;
	}
	public void setcloseNotionalBaseCcy(double newValue) {
		_closeNotionalBaseCcy = newValue;
	}
	public double getcloseNotionalPayCcy() {
		return _closeNotionalPayCcy;
	}
	public void setcloseNotionalPayCcy(double newValue) {
		_closeNotionalPayCcy = newValue;
	}
	public double getshortNotionalBaseCcy() {
		return _shortNotionalBaseCcy;
	}
	public void setshortNotionalBaseCcy(double newValue) {
		_shortNotionalBaseCcy = newValue;
	}
	public double getshortNotionalPayCcy() {
		return _shortNotionalPayCcy;
	}
	public void setshortNotionalPayCcy(double newValue) {
		_shortNotionalPayCcy = newValue;
	}
	public double getcommAmountPay() {
		return _commAmountPay;
	}
	public void setcommAmountPay(double newValue) {
		_commAmountPay = newValue;
	}
	public String getcommPayTypeCode() {
		if(_commPayTypeCode!=null) {
			return new String(_commPayTypeCode);
		}
		else {
			return null;
		}
	}
	public void setcommPayTypeCode(String newValue) {
		_commPayTypeCode = newValue!=null ? newValue.toCharArray() : null;
	}
	public double getcommRate() {
		return _commRate;
	}
	public void setcommRate(double newValue) {
		_commRate = newValue;
	}
	public String getcommTypeCode() {
		if(_commTypeCode!=null) {
			return new String(_commTypeCode);
		}
		else {
			return null;
		}
	}
	public void setcommTypeCode(String newValue) {
		_commTypeCode = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getcorporateAction() {
		if(_corporateAction!=null) {
			return new String(_corporateAction);
		}
		else {
			return null;
		}
	}
	public void setcorporateAction(String newValue) {
		_corporateAction = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getenteredby() {
		if(_enteredby!=null) {
			return new String(_enteredby);
		}
		else {
			return null;
		}
	}
	public void setenteredby(String newValue) {
		_enteredby = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getinstrumentCcyCode() {
		if(_instrumentCcyCode!=null) {
			return new String(_instrumentCcyCode);
		}
		else {
			return null;
		}
	}
	public void setinstrumentCcyCode(String newValue) {
		_instrumentCcyCode = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getinstrumentId() {
		return _instrumentId;
	}
	public void setinstrumentId(int newValue) {
		_instrumentId = newValue;
	}
	public String getinstrumentType() {
		if(_instrumentType!=null) {
			return new String(_instrumentType);
		}
		else {
			return null;
		}
	}
	public void setinstrumentType(String newValue) {
		_instrumentType = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getinstrumentDesc() {
		if(_instrumentDesc!=null) {
			return new String(_instrumentDesc);
		}
		else {
			return null;
		}
	}
	public void setinstrumentDesc(String newValue) {
		_instrumentDesc = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getticker() {
		if(_ticker!=null) {
			return new String(_ticker);
		}
		else {
			return null;
		}
	}
	public void setticker(String newValue) {
		_ticker = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getCUSIP() {
		if(_CUSIP!=null) {
			return new String(_CUSIP);
		}
		else {
			return null;
		}
	}
	public void setCUSIP(String newValue) {
		_CUSIP = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getISIN() {
		if(_ISIN!=null) {
			return new String(_ISIN);
		}
		else {
			return null;
		}
	}
	public void setISIN(String newValue) {
		_ISIN = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getSEDOL() {
		if(_SEDOL!=null) {
			return new String(_SEDOL);
		}
		else {
			return null;
		}
	}
	public void setSEDOL(String newValue) {
		_SEDOL = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getricSuffix() {
		if(_ricSuffix!=null) {
			return new String(_ricSuffix);
		}
		else {
			return null;
		}
	}
	public void setricSuffix(String newValue) {
		_ricSuffix = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getcountryCode() {
		if(_countryCode!=null) {
			return new String(_countryCode);
		}
		else {
			return null;
		}
	}
	public void setcountryCode(String newValue) {
		_countryCode = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getregion() {
		if(_region!=null) {
			return new String(_region);
		}
		else {
			return null;
		}
	}
	public void setregion(String newValue) {
		_region = newValue!=null ? newValue.toCharArray() : null;
	}
	public double getspreadException() {
		return _spreadException;
	}
	public void setspreadException(double newValue) {
		_spreadException = newValue;
	}
	public int getSTARSID() {
		return _STARSID;
	}
	public void setSTARSID(int newValue) {
		_STARSID = newValue;
	}
	public String getstrategy() {
		if(_strategy!=null) {
			return new String(_strategy);
		}
		else {
			return null;
		}
	}
	public void setstrategy(String newValue) {
		_strategy = newValue!=null ? newValue.toCharArray() : null;
	}
	public int gettracerId() {
		return _tracerId;
	}
	public void settracerId(int newValue) {
		_tracerId = newValue;
	}
	public String gettradePartyName() {
		if(_tradePartyName!=null) {
			return new String(_tradePartyName);
		}
		else {
			return null;
		}
	}
	public void settradePartyName(String newValue) {
		_tradePartyName = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getprofitCenter() {
		if(_profitCenter!=null) {
			return new String(_profitCenter);
		}
		else {
			return null;
		}
	}
	public void setprofitCenter(String newValue) {
		_profitCenter = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getprimaryExchangeCode() {
		if(_primaryExchangeCode!=null) {
			return new String(_primaryExchangeCode);
		}
		else {
			return null;
		}
	}
	public void setprimaryExchangeCode(String newValue) {
		_primaryExchangeCode = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getcounterParty() {
		if(_counterParty!=null) {
			return new String(_counterParty);
		}
		else {
			return null;
		}
	}
	public void setcounterParty(String newValue) {
		_counterParty = newValue!=null ? newValue.toCharArray() : null;
	}
	public String gettradeSource() {
		if(_tradeSource!=null) {
			return new String(_tradeSource);
		}
		else {
			return null;
		}
	}
	public void settradeSource(String newValue) {
		_tradeSource = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getinterestTicker() {
		if(_interestTicker!=null) {
			return new String(_interestTicker);
		}
		else {
			return null;
		}
	}
	public void setinterestTicker(String newValue) {
		_interestTicker = newValue!=null ? newValue.toCharArray() : null;
	}
	public double getcurrentSpread() {
		return _currentSpread;
	}
	public void setcurrentSpread(double newValue) {
		_currentSpread = newValue;
	}
	public double getcurrentRate() {
		return _currentRate;
	}
	public void setcurrentRate(double newValue) {
		_currentRate = newValue;
	}
	public int gettradePartyId() {
		return _tradePartyId;
	}
	public void settradePartyId(int newValue) {
		_tradePartyId = newValue;
	}
	public double getnetPrice() {
		return _netPrice;
	}
	public void setnetPrice(double newValue) {
		_netPrice = newValue;
	}
	public int getcustomerId() {
		return _customerId;
	}
	public void setcustomerId(int newValue) {
		_customerId = newValue;
	}
	public int getinstitutionId() {
		return _institutionId;
	}
	public void setinstitutionId(int newValue) {
		_institutionId = newValue;
	}
	public String getswapCcy() {
		if(_swapCcy!=null) {
			return new String(_swapCcy);
		}
		else {
			return null;
		}
	}
	public void setswapCcy(String newValue) {
		_swapCcy = newValue!=null ? newValue.toCharArray() : null;
	}
	public String gettradeCcy() {
		if(_tradeCcy!=null) {
			return new String(_tradeCcy);
		}
		else {
			return null;
		}
	}
	public void settradeCcy(String newValue) {
		_tradeCcy = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getessLocation() {
		return _essLocation;
	}
	public void setessLocation(int newValue) {
		_essLocation = newValue;
	}
	public boolean getisPrimary() {
		return _isPrimary;
	}
	public void setisPrimary(boolean newValue) {
		_isPrimary = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 83);
		item.putDate(_enterTime);
		da.setDataItem(sa_idx++, item);
		item.putDate(_settleDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_swapMaturity);
		da.setDataItem(sa_idx++, item);
		item.putDate(_tradeDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_taxlotMaturityDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_lastexDate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_accountName);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_businessUnitName);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_deskName);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_institutionName);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_bookName);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_customerName);
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapNumber);
		da.setDataItem(sa_idx++, item);
		item.putInt(_origswapNumber);
		da.setDataItem(sa_idx++, item);
		item.putInt(_legId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_legNumber);
		da.setDataItem(sa_idx++, item);
		item.putInt(_multiplier);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_quantity);
		da.setDataItem(sa_idx++, item);
		item.putInt(_tradeId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_eventId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_eventTypeCode);
		da.setDataItem(sa_idx++, item);
		item.putInt(_longShort);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_fxRate);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_intRate);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_closeQuantity);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_openQuantity);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_shortQuantity);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_longQuantity);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_priceBaseCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_pricePayCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_hedgeBasePrice);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_hedgePayPrice);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_payAmount);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_baseAmount);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_amortizedAmount);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_notionalBaseCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_notionalPayCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_openNotionalBaseCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_openNotionalPayCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_longNotionalBaseCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_longNotionalPayCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_closeNotionalBaseCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_closeNotionalPayCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_shortNotionalBaseCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_shortNotionalPayCcy);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_commAmountPay);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_commPayTypeCode);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_commRate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_commTypeCode);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_corporateAction);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_enteredby);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_instrumentCcyCode);
		da.setDataItem(sa_idx++, item);
		item.putInt(_instrumentId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_instrumentType);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_instrumentDesc);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ticker);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_CUSIP);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ISIN);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_SEDOL);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ricSuffix);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_countryCode);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_region);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_spreadException);
		da.setDataItem(sa_idx++, item);
		item.putInt(_STARSID);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_strategy);
		da.setDataItem(sa_idx++, item);
		item.putInt(_tracerId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_tradePartyName);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_profitCenter);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_primaryExchangeCode);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_counterParty);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_tradeSource);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_interestTicker);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_currentSpread);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_currentRate);
		da.setDataItem(sa_idx++, item);
		item.putInt(_tradePartyId);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_netPrice);
		da.setDataItem(sa_idx++, item);
		item.putInt(_customerId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_institutionId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_swapCcy);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_tradeCcy);
		da.setDataItem(sa_idx++, item);
		item.putInt(_essLocation);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_isPrimary);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_enterTime = item.getDate();
		in.getDataItem(sa_idx++, item);
		_settleDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_swapMaturity = item.getDate();
		in.getDataItem(sa_idx++, item);
		_tradeDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_taxlotMaturityDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_lastexDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_accountName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_businessUnitName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_deskName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_institutionName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_bookName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_customerName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_swapId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapNumber = item.getInt();
		in.getDataItem(sa_idx++, item);
		_origswapNumber = item.getInt();
		in.getDataItem(sa_idx++, item);
		_legId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_legNumber = item.getInt();
		in.getDataItem(sa_idx++, item);
		_multiplier = item.getInt();
		in.getDataItem(sa_idx++, item);
		_quantity = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_tradeId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_eventId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_eventTypeCode = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_longShort = item.getInt();
		in.getDataItem(sa_idx++, item);
		_fxRate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_intRate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_closeQuantity = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_openQuantity = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_shortQuantity = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_longQuantity = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_priceBaseCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_pricePayCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_hedgeBasePrice = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_hedgePayPrice = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_payAmount = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_baseAmount = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_amortizedAmount = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_notionalBaseCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_notionalPayCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_openNotionalBaseCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_openNotionalPayCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_longNotionalBaseCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_longNotionalPayCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_closeNotionalBaseCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_closeNotionalPayCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_shortNotionalBaseCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_shortNotionalPayCcy = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_commAmountPay = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_commPayTypeCode = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_commRate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_commTypeCode = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_corporateAction = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_enteredby = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_instrumentCcyCode = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_instrumentId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_instrumentType = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_instrumentDesc = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_ticker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_CUSIP = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_ISIN = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_SEDOL = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_ricSuffix = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_countryCode = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_region = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_spreadException = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_STARSID = item.getInt();
		in.getDataItem(sa_idx++, item);
		_strategy = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_tracerId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_tradePartyName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_profitCenter = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_primaryExchangeCode = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_counterParty = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_tradeSource = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_interestTicker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_currentSpread = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_currentRate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_tradePartyId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_netPrice = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_customerId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_institutionId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapCcy = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_tradeCcy = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_essLocation = item.getInt();
		in.getDataItem(sa_idx++, item);
		_isPrimary = item.getBoolean();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _enterTime =  new Date();
	private Date _settleDate =  new Date();
	private Date _swapMaturity =  new Date();
	private Date _tradeDate =  new Date();
	private Date _taxlotMaturityDate =  new Date();
	private Date _lastexDate =  new Date();
	private char[] _accountName;
	private char[] _businessUnitName;
	private char[] _deskName;
	private char[] _institutionName;
	private char[] _bookName;
	private char[] _customerName;
	private int _swapId;
	private int _swapNumber;
	private int _origswapNumber;
	private int _legId;
	private int _legNumber;
	private int _multiplier;
	private double _quantity;
	private int _tradeId;
	private int _eventId;
	private char[] _eventTypeCode;
	private int _longShort;
	private double _fxRate;
	private double _intRate;
	private double _closeQuantity;
	private double _openQuantity;
	private double _shortQuantity;
	private double _longQuantity;
	private double _priceBaseCcy;
	private double _pricePayCcy;
	private double _hedgeBasePrice;
	private double _hedgePayPrice;
	private double _payAmount;
	private double _baseAmount;
	private double _amortizedAmount;
	private double _notionalBaseCcy;
	private double _notionalPayCcy;
	private double _openNotionalBaseCcy;
	private double _openNotionalPayCcy;
	private double _longNotionalBaseCcy;
	private double _longNotionalPayCcy;
	private double _closeNotionalBaseCcy;
	private double _closeNotionalPayCcy;
	private double _shortNotionalBaseCcy;
	private double _shortNotionalPayCcy;
	private double _commAmountPay;
	private char[] _commPayTypeCode;
	private double _commRate;
	private char[] _commTypeCode;
	private char[] _corporateAction;
	private char[] _enteredby;
	private char[] _instrumentCcyCode;
	private int _instrumentId;
	private char[] _instrumentType;
	private char[] _instrumentDesc;
	private char[] _ticker;
	private char[] _CUSIP;
	private char[] _ISIN;
	private char[] _SEDOL;
	private char[] _ricSuffix;
	private char[] _countryCode;
	private char[] _region;
	private double _spreadException;
	private int _STARSID;
	private char[] _strategy;
	private int _tracerId;
	private char[] _tradePartyName;
	private char[] _profitCenter;
	private char[] _primaryExchangeCode;
	private char[] _counterParty;
	private char[] _tradeSource;
	private char[] _interestTicker;
	private double _currentSpread;
	private double _currentRate;
	private int _tradePartyId;
	private double _netPrice;
	private int _customerId;
	private int _institutionId;
	private char[] _swapCcy;
	private char[] _tradeCcy;
	private int _essLocation;
	private boolean _isPrimary;
	private DataItem item = new DataItem();
}

