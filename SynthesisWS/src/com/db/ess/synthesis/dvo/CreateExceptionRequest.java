// Title:        CreateExceptionRequest
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class CreateExceptionRequest implements FastCacheDVOBase  {
	public long gettickerLevelParamsCount() { 
		return _tickerLevelParamsCount;
	}
	public TickerLevelParams[] gettickerLevelParamsArray() { 
		return _tickerLevelParams;
	}
	public void settickerLevelParamsArray(TickerLevelParams newValue[]) { 
		_tickerLevelParams=newValue;
	}
	@SuppressWarnings("rawtypes")
	public Iterator gettickerLevelParamsIterator() { 
		return new Iterator() {
			int cursor=0;
			int last=-1;
			public boolean hasNext() {
				if(_tickerLevelParams==null) return false;
				if(last<0) {
					last = _tickerLevelParams.length;
					while(--last>-1&&_tickerLevelParams[last]==null);
					last++;
				}
				return cursor!=last;
			}
			public Object next() {
				try {
					return _tickerLevelParams[cursor++];
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
			public void remove() {
				try {
					_tickerLevelParams[cursor++]=null;
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
		};
	}
	public TickerLevelParams gettickerLevelParams(int idx) { 
		return (TickerLevelParams)_tickerLevelParams[idx];
	}
	public void settickerLevelParams(TickerLevelParams newValue) { 
		if(_tickerLevelParams!=null) {
			int __OPEN_A=-1;
			for(int __I_A=0;__I_A<_tickerLevelParams.length;__I_A++) {
				if(_tickerLevelParams[__I_A]==null) {
					__OPEN_A=__I_A;
					break;
				}
			}
			if(__OPEN_A<0) {
				__OPEN_A=_tickerLevelParams.length;
				TickerLevelParams array[] = new TickerLevelParams[__OPEN_A+10];
				System.arraycopy(_tickerLevelParams,0,array,0,_tickerLevelParams.length);
				_tickerLevelParams = array;
			}
			_tickerLevelParams[__OPEN_A] = newValue;
		}
		else {
			_tickerLevelParams = new TickerLevelParams[10];
			_tickerLevelParams[0] = newValue;
		}
		_tickerLevelParamsCount++;
	}
	public String getexceptionType() {
		if(_exceptionType!=null) {
			return new String(_exceptionType);
		}
		else {
			return null;
		}
	}
	public void setexceptionType(String newValue) {
		_exceptionType = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getlocation() {
		return _location;
	}
	public void setlocation(int newValue) {
		_location = newValue;
	}
	public int getbookSeries() {
		return _bookSeries;
	}
	public void setbookSeries(int newValue) {
		_bookSeries = newValue;
	}
	public int getinstitution() {
		return _institution;
	}
	public void setinstitution(int newValue) {
		_institution = newValue;
	}
	public int getlegalEntity() {
		return _legalEntity;
	}
	public void setlegalEntity(int newValue) {
		_legalEntity = newValue;
	}
	public int getcountry() {
		return _country;
	}
	public void setcountry(int newValue) {
		_country = newValue;
	}
	public String getswapNumber() {
		if(_swapNumber!=null) {
			return new String(_swapNumber);
		}
		else {
			return null;
		}
	}
	public void setswapNumber(String newValue) {
		_swapNumber = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getuserId() {
		return _userId;
	}
	public void setuserId(int newValue) {
		_userId = newValue;
	}
	public boolean getisTrader() {
		return _isTrader;
	}
	public void setisTrader(boolean newValue) {
		_isTrader = newValue;
	}
	public String getrequester() {
		if(_requester!=null) {
			return new String(_requester);
		}
		else {
			return null;
		}
	}
	public void setrequester(String newValue) {
		_requester = newValue!=null ? newValue.toCharArray() : null;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 11);
		if(_tickerLevelParams!=null) {
			DataArray daChild = new DataArray(DataItem.DATAITEMARRAY, _tickerLevelParamsCount);
			for(int __I_A=0;__I_A<_tickerLevelParamsCount;__I_A++) {
				daChild.setDataArray(__I_A, _tickerLevelParams[__I_A].writeCache());
			}
			item.putDataArray(daChild);
		}
		else {
			item.putEmpty();
		}
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_exceptionType);
		da.setDataItem(sa_idx++, item);
		item.putInt(_location);
		da.setDataItem(sa_idx++, item);
		item.putInt(_bookSeries);
		da.setDataItem(sa_idx++, item);
		item.putInt(_institution);
		da.setDataItem(sa_idx++, item);
		item.putInt(_legalEntity);
		da.setDataItem(sa_idx++, item);
		item.putInt(_country);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_swapNumber);
		da.setDataItem(sa_idx++, item);
		item.putInt(_userId);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_isTrader);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_requester);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		DataArray daItem = new DataArray();
		DataArray daElement = new DataArray();
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_tickerLevelParamsCount = daItem.getElements();
		if(_tickerLevelParamsCount>0) {
			_tickerLevelParams = new TickerLevelParams [(int)_tickerLevelParamsCount];
			for(int __I_A=0;__I_A<_tickerLevelParamsCount;__I_A++) {
				_tickerLevelParams[__I_A] = new TickerLevelParams();
				daItem.getDataArray(__I_A, daElement);
				_tickerLevelParams[__I_A].readCache(daElement);
			}
		}
		in.getDataItem(sa_idx++, item);
		_exceptionType = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_location = item.getInt();
		in.getDataItem(sa_idx++, item);
		_bookSeries = item.getInt();
		in.getDataItem(sa_idx++, item);
		_institution = item.getInt();
		in.getDataItem(sa_idx++, item);
		_legalEntity = item.getInt();
		in.getDataItem(sa_idx++, item);
		_country = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapNumber = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_userId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_isTrader = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_requester = item.getCharArray();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private TickerLevelParams _tickerLevelParams[] = null;
	private long _tickerLevelParamsCount = 0;
	private char[] _exceptionType;
	private int _location;
	private int _bookSeries;
	private int _institution;
	private int _legalEntity;
	private int _country;
	private char[] _swapNumber;
	private int _userId;
	private boolean _isTrader;
	private char[] _requester;
	private DataItem item = new DataItem();
}

