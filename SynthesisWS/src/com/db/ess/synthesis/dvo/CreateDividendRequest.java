// Title:        CreateDividendRequest
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class CreateDividendRequest implements FastCacheDVOBase  {
	public Date getexDate() { 
		return _exDate;
	}
	public void setexDate(Date newValue) { 
		_exDate = newValue;
	}
	public Date getrecDate() { 
		return _recDate;
	}
	public void setrecDate(Date newValue) { 
		_recDate = newValue;
	}
	public Date getpaymentDate() { 
		return _paymentDate;
	}
	public void setpaymentDate(Date newValue) { 
		_paymentDate = newValue;
	}
	public String getindexTicker() {
		if(_indexTicker!=null) {
			return new String(_indexTicker);
		}
		else {
			return null;
		}
	}
	public void setindexTicker(String newValue) {
		_indexTicker = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getunderTicker() {
		if(_underTicker!=null) {
			return new String(_underTicker);
		}
		else {
			return null;
		}
	}
	public void setunderTicker(String newValue) {
		_underTicker = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getcurrency() {
		if(_currency!=null) {
			return new String(_currency);
		}
		else {
			return null;
		}
	}
	public void setcurrency(String newValue) {
		_currency = newValue!=null ? newValue.toCharArray() : null;
	}
	public double getnetAmount() {
		return _netAmount;
	}
	public void setnetAmount(double newValue) {
		_netAmount = newValue;
	}
	public double getgrossAmount() {
		return _grossAmount;
	}
	public void setgrossAmount(double newValue) {
		_grossAmount = newValue;
	}
	public double gettaxRate() {
		return _taxRate;
	}
	public void settaxRate(double newValue) {
		_taxRate = newValue;
	}
	public String getcomment() {
		if(_comment!=null) {
			return new String(_comment);
		}
		else {
			return null;
		}
	}
	public void setcomment(String newValue) {
		_comment = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getfeedId() {
		if(_feedId!=null) {
			return new String(_feedId);
		}
		else {
			return null;
		}
	}
	public void setfeedId(String newValue) {
		_feedId = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getlocation() {
		return _location;
	}
	public void setlocation(int newValue) {
		_location = newValue;
	}
	public int getuserId() {
		return _userId;
	}
	public void setuserId(int newValue) {
		_userId = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 13);
		item.putDate(_exDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_recDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_paymentDate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_indexTicker);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_underTicker);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_currency);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_netAmount);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_grossAmount);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_taxRate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_comment);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_feedId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_location);
		da.setDataItem(sa_idx++, item);
		item.putInt(_userId);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_exDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_recDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_paymentDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_indexTicker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_underTicker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_currency = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_netAmount = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_grossAmount = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_taxRate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_comment = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_feedId = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_location = item.getInt();
		in.getDataItem(sa_idx++, item);
		_userId = item.getInt();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _exDate =  new Date();
	private Date _recDate =  new Date();
	private Date _paymentDate =  new Date();
	private char[] _indexTicker;
	private char[] _underTicker;
	private char[] _currency;
	private double _netAmount;
	private double _grossAmount;
	private double _taxRate;
	private char[] _comment;
	private char[] _feedId;
	private int _location;
	private int _userId;
	private DataItem item = new DataItem();
}

