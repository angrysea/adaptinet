// Title:        ImpactedSwap
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class ImpactedSwap implements FastCacheDVOBase  {
	public String getinstitution() {
		if(_institution!=null) {
			return new String(_institution);
		}
		else {
			return null;
		}
	}
	public void setinstitution(String newValue) {
		_institution = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getbook() {
		if(_book!=null) {
			return new String(_book);
		}
		else {
			return null;
		}
	}
	public void setbook(String newValue) {
		_book = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getlegalEntity() {
		if(_legalEntity!=null) {
			return new String(_legalEntity);
		}
		else {
			return null;
		}
	}
	public void setlegalEntity(String newValue) {
		_legalEntity = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getswapNumber() {
		return _swapNumber;
	}
	public void setswapNumber(int newValue) {
		_swapNumber = newValue;
	}
	public int getswapId() {
		return _swapId;
	}
	public void setswapId(int newValue) {
		_swapId = newValue;
	}
	public String getdivCcy() {
		if(_divCcy!=null) {
			return new String(_divCcy);
		}
		else {
			return null;
		}
	}
	public void setdivCcy(String newValue) {
		_divCcy = newValue!=null ? newValue.toCharArray() : null;
	}
	public float getcashFlow() {
		return _cashFlow;
	}
	public void setcashFlow(float newValue) {
		_cashFlow = newValue;
	}
	public float getquantity() {
		return _quantity;
	}
	public void setquantity(float newValue) {
		_quantity = newValue;
	}
	public String getticker() {
		if(_ticker!=null) {
			return new String(_ticker);
		}
		else {
			return null;
		}
	}
	public void setticker(String newValue) {
		_ticker = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getaltDivCcy() {
		if(_altDivCcy!=null) {
			return new String(_altDivCcy);
		}
		else {
			return null;
		}
	}
	public void setaltDivCcy(String newValue) {
		_altDivCcy = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getdivId() {
		return _divId;
	}
	public void setdivId(int newValue) {
		_divId = newValue;
	}
	public int getlocation() {
		return _location;
	}
	public void setlocation(int newValue) {
		_location = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 12);
		item.putCharArray(_institution);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_book);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_legalEntity);
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapNumber);
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_divCcy);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_cashFlow);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_quantity);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ticker);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_altDivCcy);
		da.setDataItem(sa_idx++, item);
		item.putInt(_divId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_location);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_institution = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_book = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_legalEntity = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_swapNumber = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_divCcy = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_cashFlow = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_quantity = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_ticker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_altDivCcy = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_divId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_location = item.getInt();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private char[] _institution;
	private char[] _book;
	private char[] _legalEntity;
	private int _swapNumber;
	private int _swapId;
	private char[] _divCcy;
	private float _cashFlow;
	private float _quantity;
	private char[] _ticker;
	private char[] _altDivCcy;
	private int _divId;
	private int _location;
	private DataItem item = new DataItem();
}

