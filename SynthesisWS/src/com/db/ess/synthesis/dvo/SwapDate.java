// Title:        SwapDate
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class SwapDate implements FastCacheDVOBase  {
	public long getequityResetCalendarCount() { 
		return _equityResetCalendarCount;
	}
	public ResetCalendar[] getequityResetCalendarArray() { 
		return _equityResetCalendar;
	}
	public void setequityResetCalendarArray(ResetCalendar newValue[]) { 
		_equityResetCalendar=newValue;
	}
	@SuppressWarnings("rawtypes")
	public Iterator getequityResetCalendarIterator() { 
		return new Iterator() {
			int cursor=0;
			int last=-1;
			public boolean hasNext() {
				if(_equityResetCalendar==null) return false;
				if(last<0) {
					last = _equityResetCalendar.length;
					while(--last>-1&&_equityResetCalendar[last]==null);
					last++;
				}
				return cursor!=last;
			}
			public Object next() {
				try {
					return _equityResetCalendar[cursor++];
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
			public void remove() {
				try {
					_equityResetCalendar[cursor++]=null;
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
		};
	}
	public ResetCalendar getequityResetCalendar(int idx) { 
		return (ResetCalendar)_equityResetCalendar[idx];
	}
	public void setequityResetCalendar(ResetCalendar newValue) { 
		if(_equityResetCalendar!=null) {
			int __OPEN_A=-1;
			for(int __I_A=0;__I_A<_equityResetCalendar.length;__I_A++) {
				if(_equityResetCalendar[__I_A]==null) {
					__OPEN_A=__I_A;
					break;
				}
			}
			if(__OPEN_A<0) {
				__OPEN_A=_equityResetCalendar.length;
				ResetCalendar array[] = new ResetCalendar[__OPEN_A+10];
				System.arraycopy(_equityResetCalendar,0,array,0,_equityResetCalendar.length);
				_equityResetCalendar = array;
			}
			_equityResetCalendar[__OPEN_A] = newValue;
		}
		else {
			_equityResetCalendar = new ResetCalendar[10];
			_equityResetCalendar[0] = newValue;
		}
		_equityResetCalendarCount++;
	}
	public long getinterestResetCalendarCount() { 
		return _interestResetCalendarCount;
	}
	public ResetCalendar[] getinterestResetCalendarArray() { 
		return _interestResetCalendar;
	}
	public void setinterestResetCalendarArray(ResetCalendar newValue[]) { 
		_interestResetCalendar=newValue;
	}
	@SuppressWarnings("rawtypes")
	public Iterator getinterestResetCalendarIterator() { 
		return new Iterator() {
			int cursor=0;
			int last=-1;
			public boolean hasNext() {
				if(_interestResetCalendar==null) return false;
				if(last<0) {
					last = _interestResetCalendar.length;
					while(--last>-1&&_interestResetCalendar[last]==null);
					last++;
				}
				return cursor!=last;
			}
			public Object next() {
				try {
					return _interestResetCalendar[cursor++];
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
			public void remove() {
				try {
					_interestResetCalendar[cursor++]=null;
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
		};
	}
	public ResetCalendar getinterestResetCalendar(int idx) { 
		return (ResetCalendar)_interestResetCalendar[idx];
	}
	public void setinterestResetCalendar(ResetCalendar newValue) { 
		if(_interestResetCalendar!=null) {
			int __OPEN_A=-1;
			for(int __I_A=0;__I_A<_interestResetCalendar.length;__I_A++) {
				if(_interestResetCalendar[__I_A]==null) {
					__OPEN_A=__I_A;
					break;
				}
			}
			if(__OPEN_A<0) {
				__OPEN_A=_interestResetCalendar.length;
				ResetCalendar array[] = new ResetCalendar[__OPEN_A+10];
				System.arraycopy(_interestResetCalendar,0,array,0,_interestResetCalendar.length);
				_interestResetCalendar = array;
			}
			_interestResetCalendar[__OPEN_A] = newValue;
		}
		else {
			_interestResetCalendar = new ResetCalendar[10];
			_interestResetCalendar[0] = newValue;
		}
		_interestResetCalendarCount++;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 2);
		if(_equityResetCalendar!=null) {
			DataArray daChild = new DataArray(DataItem.DATAITEMARRAY, _equityResetCalendarCount);
			for(int __I_A=0;__I_A<_equityResetCalendarCount;__I_A++) {
				daChild.setDataArray(__I_A, _equityResetCalendar[__I_A].writeCache());
			}
			item.putDataArray(daChild);
		}
		else {
			item.putEmpty();
		}
		da.setDataItem(sa_idx++, item);
		if(_interestResetCalendar!=null) {
			DataArray daChild = new DataArray(DataItem.DATAITEMARRAY, _interestResetCalendarCount);
			for(int __I_A=0;__I_A<_interestResetCalendarCount;__I_A++) {
				daChild.setDataArray(__I_A, _interestResetCalendar[__I_A].writeCache());
			}
			item.putDataArray(daChild);
		}
		else {
			item.putEmpty();
		}
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		DataArray daItem = new DataArray();
		DataArray daElement = new DataArray();
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_equityResetCalendarCount = daItem.getElements();
		if(_equityResetCalendarCount>0) {
			_equityResetCalendar = new ResetCalendar [(int)_equityResetCalendarCount];
			for(int __I_A=0;__I_A<_equityResetCalendarCount;__I_A++) {
				_equityResetCalendar[__I_A] = new ResetCalendar();
				daItem.getDataArray(__I_A, daElement);
				_equityResetCalendar[__I_A].readCache(daElement);
			}
		}
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_interestResetCalendarCount = daItem.getElements();
		if(_interestResetCalendarCount>0) {
			_interestResetCalendar = new ResetCalendar [(int)_interestResetCalendarCount];
			for(int __I_A=0;__I_A<_interestResetCalendarCount;__I_A++) {
				_interestResetCalendar[__I_A] = new ResetCalendar();
				daItem.getDataArray(__I_A, daElement);
				_interestResetCalendar[__I_A].readCache(daElement);
			}
		}
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private ResetCalendar _equityResetCalendar[] = null;
	private long _equityResetCalendarCount = 0;
	private ResetCalendar _interestResetCalendar[] = null;
	private long _interestResetCalendarCount = 0;
	private DataItem item = new DataItem();
}

