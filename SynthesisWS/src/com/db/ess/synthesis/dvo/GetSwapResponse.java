// Title:        GetSwapResponse
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class GetSwapResponse implements FastCacheDVOBase  {
	public ReturnResponse getreturnResponse() { 
		return _returnResponse;
	}
	public void setreturnResponse(ReturnResponse newValue) { 
		_returnResponse = newValue;
	}
	public long getswapsCount() { 
		return _swapsCount;
	}
	public Swap[] getswapsArray() { 
		return _swaps;
	}
	public void setswapsArray(Swap newValue[]) { 
		_swaps=newValue;
	}
	@SuppressWarnings("rawtypes")
	public Iterator getswapsIterator() { 
		return new Iterator() {
			int cursor=0;
			int last=-1;
			public boolean hasNext() {
				if(_swaps==null) return false;
				if(last<0) {
					last = _swaps.length;
					while(--last>-1&&_swaps[last]==null);
					last++;
				}
				return cursor!=last;
			}
			public Object next() {
				try {
					return _swaps[cursor++];
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
			public void remove() {
				try {
					_swaps[cursor++]=null;
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
		};
	}
	public Swap getswaps(int idx) { 
		return (Swap)_swaps[idx];
	}
	public void setswaps(Swap newValue) { 
		if(_swaps!=null) {
			int __OPEN_A=-1;
			for(int __I_A=0;__I_A<_swaps.length;__I_A++) {
				if(_swaps[__I_A]==null) {
					__OPEN_A=__I_A;
					break;
				}
			}
			if(__OPEN_A<0) {
				__OPEN_A=_swaps.length;
				Swap array[] = new Swap[__OPEN_A+10];
				System.arraycopy(_swaps,0,array,0,_swaps.length);
				_swaps = array;
			}
			_swaps[__OPEN_A] = newValue;
		}
		else {
			_swaps = new Swap[10];
			_swaps[0] = newValue;
		}
		_swapsCount++;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 2);
		item.putDataArray(_returnResponse.writeCache());
		da.setDataItem(sa_idx++, item);
		if(_swaps!=null) {
			DataArray daChild = new DataArray(DataItem.DATAITEMARRAY, _swapsCount);
			for(int __I_A=0;__I_A<_swapsCount;__I_A++) {
				daChild.setDataArray(__I_A, _swaps[__I_A].writeCache());
			}
			item.putDataArray(daChild);
		}
		else {
			item.putEmpty();
		}
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		DataArray daItem = new DataArray();
		DataArray daElement = new DataArray();
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_returnResponse.readCache(daItem);
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_swapsCount = daItem.getElements();
		if(_swapsCount>0) {
			_swaps = new Swap [(int)_swapsCount];
			for(int __I_A=0;__I_A<_swapsCount;__I_A++) {
				_swaps[__I_A] = new Swap();
				daItem.getDataArray(__I_A, daElement);
				_swaps[__I_A].readCache(daElement);
			}
		}
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private ReturnResponse _returnResponse =  new ReturnResponse();
	private Swap _swaps[] = null;
	private long _swapsCount = 0;
	private DataItem item = new DataItem();
}

