// Title:        GetActionSpillQueueRequest
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class GetActionSpillQueueRequest implements FastCacheDVOBase  {
	public Date getexDate() { 
		return _exDate;
	}
	public void setexDate(Date newValue) { 
		_exDate = newValue;
	}
	public Date getrecDate() { 
		return _recDate;
	}
	public void setrecDate(Date newValue) { 
		_recDate = newValue;
	}
	public Date getpayDate() { 
		return _payDate;
	}
	public void setpayDate(Date newValue) { 
		_payDate = newValue;
	}
	public int getlocation() {
		return _location;
	}
	public void setlocation(int newValue) {
		_location = newValue;
	}
	public String getfeedId() {
		if(_feedId!=null) {
			return new String(_feedId);
		}
		else {
			return null;
		}
	}
	public void setfeedId(String newValue) {
		_feedId = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getunderlyingId() {
		return _underlyingId;
	}
	public void setunderlyingId(int newValue) {
		_underlyingId = newValue;
	}
	public int getindexId() {
		return _indexId;
	}
	public void setindexId(int newValue) {
		_indexId = newValue;
	}
	public int getdivId() {
		return _divId;
	}
	public void setdivId(int newValue) {
		_divId = newValue;
	}
	public String getcomment() {
		if(_comment!=null) {
			return new String(_comment);
		}
		else {
			return null;
		}
	}
	public void setcomment(String newValue) {
		_comment = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getaction() {
		if(_action!=null) {
			return new String(_action);
		}
		else {
			return null;
		}
	}
	public void setaction(String newValue) {
		_action = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getstatus() {
		return _status;
	}
	public void setstatus(int newValue) {
		_status = newValue;
	}
	public String getcurrency() {
		if(_currency!=null) {
			return new String(_currency);
		}
		else {
			return null;
		}
	}
	public void setcurrency(String newValue) {
		_currency = newValue!=null ? newValue.toCharArray() : null;
	}
	public float getnetAmount() {
		return _netAmount;
	}
	public void setnetAmount(float newValue) {
		_netAmount = newValue;
	}
	public float getgrossAmount() {
		return _grossAmount;
	}
	public void setgrossAmount(float newValue) {
		_grossAmount = newValue;
	}
	public int getuserId() {
		return _userId;
	}
	public void setuserId(int newValue) {
		_userId = newValue;
	}
	public String getspillStatus() {
		if(_spillStatus!=null) {
			return new String(_spillStatus);
		}
		else {
			return null;
		}
	}
	public void setspillStatus(String newValue) {
		_spillStatus = newValue!=null ? newValue.toCharArray() : null;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 16);
		item.putDate(_exDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_recDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_payDate);
		da.setDataItem(sa_idx++, item);
		item.putInt(_location);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_feedId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_underlyingId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_indexId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_divId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_comment);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_action);
		da.setDataItem(sa_idx++, item);
		item.putInt(_status);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_currency);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_netAmount);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_grossAmount);
		da.setDataItem(sa_idx++, item);
		item.putInt(_userId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_spillStatus);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_exDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_recDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_payDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_location = item.getInt();
		in.getDataItem(sa_idx++, item);
		_feedId = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_underlyingId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_indexId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_divId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_comment = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_action = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_status = item.getInt();
		in.getDataItem(sa_idx++, item);
		_currency = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_netAmount = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_grossAmount = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_userId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_spillStatus = item.getCharArray();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _exDate =  new Date();
	private Date _recDate =  new Date();
	private Date _payDate =  new Date();
	private int _location;
	private char[] _feedId;
	private int _underlyingId;
	private int _indexId;
	private int _divId;
	private char[] _comment;
	private char[] _action;
	private int _status;
	private char[] _currency;
	private float _netAmount;
	private float _grossAmount;
	private int _userId;
	private char[] _spillStatus;
	private DataItem item = new DataItem();
}

