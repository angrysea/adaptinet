// Title:        ReRateExceptionParams
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class ReRateExceptionParams implements FastCacheDVOBase  {
	public String getexceptionType() {
		if(_exceptionType!=null) {
			return new String(_exceptionType);
		}
		else {
			return null;
		}
	}
	public void setexceptionType(String newValue) {
		_exceptionType = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getexceptId() {
		return _exceptId;
	}
	public void setexceptId(int newValue) {
		_exceptId = newValue;
	}
	public double getrate() {
		return _rate;
	}
	public void setrate(double newValue) {
		_rate = newValue;
	}
	public double getspread() {
		return _spread;
	}
	public void setspread(double newValue) {
		_spread = newValue;
	}
	public double gettradeRate() {
		return _tradeRate;
	}
	public void settradeRate(double newValue) {
		_tradeRate = newValue;
	}
	public double getsettleRate() {
		return _settleRate;
	}
	public void setsettleRate(double newValue) {
		_settleRate = newValue;
	}
	public Date getstartDate() {
		return _startDate;
	}
	public void setstartDate(Date newValue) {
		_startDate = newValue;
	}
	public Date getendDate() {
		return _endDate;
	}
	public void setendDate(Date newValue) {
		_endDate = newValue;
	}
	public String getcomment() {
		if(_comment!=null) {
			return new String(_comment);
		}
		else {
			return null;
		}
	}
	public void setcomment(String newValue) {
		_comment = newValue!=null ? newValue.toCharArray() : null;
	}
	public short getstatus() {
		return _status;
	}
	public void setstatus(short newValue) {
		_status = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 10);
		item.putCharArray(_exceptionType);
		da.setDataItem(sa_idx++, item);
		item.putInt(_exceptId);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_rate);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_spread);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_tradeRate);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_settleRate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_startDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_endDate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_comment);
		da.setDataItem(sa_idx++, item);
		item.putShort(_status);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_exceptionType = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_exceptId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_rate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_spread = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_tradeRate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_settleRate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_startDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_endDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_comment = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_status = item.getShort();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private char[] _exceptionType;
	private int _exceptId;
	private double _rate;
	private double _spread;
	private double _tradeRate;
	private double _settleRate;
	private Date _startDate;
	private Date _endDate;
	private char[] _comment;
	private short _status;
	private DataItem item = new DataItem();
}

