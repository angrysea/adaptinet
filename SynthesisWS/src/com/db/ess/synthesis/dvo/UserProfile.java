// Title:        UserProfile
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class UserProfile implements FastCacheDVOBase  {
	public long getlayoutCount() { 
		return _layoutCount;
	}
	public Layout[] getlayoutArray() { 
		return _layout;
	}
	public void setlayoutArray(Layout newValue[]) { 
		_layout=newValue;
	}
	@SuppressWarnings("rawtypes")
	public Iterator getlayoutIterator() { 
		return new Iterator() {
			int cursor=0;
			int last=-1;
			public boolean hasNext() {
				if(_layout==null) return false;
				if(last<0) {
					last = _layout.length;
					while(--last>-1&&_layout[last]==null);
					last++;
				}
				return cursor!=last;
			}
			public Object next() {
				try {
					return _layout[cursor++];
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
			public void remove() {
				try {
					_layout[cursor++]=null;
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
		};
	}
	public Layout getlayout(int idx) { 
		return (Layout)_layout[idx];
	}
	public void setlayout(Layout newValue) { 
		if(_layout!=null) {
			int __OPEN_A=-1;
			for(int __I_A=0;__I_A<_layout.length;__I_A++) {
				if(_layout[__I_A]==null) {
					__OPEN_A=__I_A;
					break;
				}
			}
			if(__OPEN_A<0) {
				__OPEN_A=_layout.length;
				Layout array[] = new Layout[__OPEN_A+10];
				System.arraycopy(_layout,0,array,0,_layout.length);
				_layout = array;
			}
			_layout[__OPEN_A] = newValue;
		}
		else {
			_layout = new Layout[10];
			_layout[0] = newValue;
		}
		_layoutCount++;
	}
	public long getuserLocationsCount() { 
		return _userLocationsCount;
	}
	public UserLocation[] getuserLocationsArray() { 
		return _userLocations;
	}
	public void setuserLocationsArray(UserLocation newValue[]) { 
		_userLocations=newValue;
	}
	@SuppressWarnings("rawtypes")
	public Iterator getuserLocationsIterator() { 
		return new Iterator() {
			int cursor=0;
			int last=-1;
			public boolean hasNext() {
				if(_userLocations==null) return false;
				if(last<0) {
					last = _userLocations.length;
					while(--last>-1&&_userLocations[last]==null);
					last++;
				}
				return cursor!=last;
			}
			public Object next() {
				try {
					return _userLocations[cursor++];
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
			public void remove() {
				try {
					_userLocations[cursor++]=null;
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
		};
	}
	public UserLocation getuserLocations(int idx) { 
		return (UserLocation)_userLocations[idx];
	}
	public void setuserLocations(UserLocation newValue) { 
		if(_userLocations!=null) {
			int __OPEN_A=-1;
			for(int __I_A=0;__I_A<_userLocations.length;__I_A++) {
				if(_userLocations[__I_A]==null) {
					__OPEN_A=__I_A;
					break;
				}
			}
			if(__OPEN_A<0) {
				__OPEN_A=_userLocations.length;
				UserLocation array[] = new UserLocation[__OPEN_A+10];
				System.arraycopy(_userLocations,0,array,0,_userLocations.length);
				_userLocations = array;
			}
			_userLocations[__OPEN_A] = newValue;
		}
		else {
			_userLocations = new UserLocation[10];
			_userLocations[0] = newValue;
		}
		_userLocationsCount++;
	}
	public long getfunctionEntitlementCount() { 
		return _functionEntitlementCount;
	}
	public FunctionEntitlement[] getfunctionEntitlementArray() { 
		return _functionEntitlement;
	}
	public void setfunctionEntitlementArray(FunctionEntitlement newValue[]) { 
		_functionEntitlement=newValue;
	}
	@SuppressWarnings("rawtypes")
	public Iterator getfunctionEntitlementIterator() { 
		return new Iterator() {
			int cursor=0;
			int last=-1;
			public boolean hasNext() {
				if(_functionEntitlement==null) return false;
				if(last<0) {
					last = _functionEntitlement.length;
					while(--last>-1&&_functionEntitlement[last]==null);
					last++;
				}
				return cursor!=last;
			}
			public Object next() {
				try {
					return _functionEntitlement[cursor++];
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
			public void remove() {
				try {
					_functionEntitlement[cursor++]=null;
				} catch(IndexOutOfBoundsException e) {
					throw new NoSuchElementException();
				}
			}
		};
	}
	public FunctionEntitlement getfunctionEntitlement(int idx) { 
		return (FunctionEntitlement)_functionEntitlement[idx];
	}
	public void setfunctionEntitlement(FunctionEntitlement newValue) { 
		if(_functionEntitlement!=null) {
			int __OPEN_A=-1;
			for(int __I_A=0;__I_A<_functionEntitlement.length;__I_A++) {
				if(_functionEntitlement[__I_A]==null) {
					__OPEN_A=__I_A;
					break;
				}
			}
			if(__OPEN_A<0) {
				__OPEN_A=_functionEntitlement.length;
				FunctionEntitlement array[] = new FunctionEntitlement[__OPEN_A+10];
				System.arraycopy(_functionEntitlement,0,array,0,_functionEntitlement.length);
				_functionEntitlement = array;
			}
			_functionEntitlement[__OPEN_A] = newValue;
		}
		else {
			_functionEntitlement = new FunctionEntitlement[10];
			_functionEntitlement[0] = newValue;
		}
		_functionEntitlementCount++;
	}
	public int getuserId() {
		return _userId;
	}
	public void setuserId(int newValue) {
		_userId = newValue;
	}
	public int getuserIdNY() {
		return _userIdNY;
	}
	public void setuserIdNY(int newValue) {
		_userIdNY = newValue;
	}
	public String getemail() {
		if(_email!=null) {
			return new String(_email);
		}
		else {
			return null;
		}
	}
	public void setemail(String newValue) {
		_email = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getdefaultLocation() {
		return _defaultLocation;
	}
	public void setdefaultLocation(int newValue) {
		_defaultLocation = newValue;
	}
	public int getcacheVersion() {
		return _cacheVersion;
	}
	public void setcacheVersion(int newValue) {
		_cacheVersion = newValue;
	}
	public int getavailableLocation() {
		return _availableLocation;
	}
	public void setavailableLocation(int newValue) {
		_availableLocation = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 9);
		if(_layout!=null) {
			DataArray daChild = new DataArray(DataItem.DATAITEMARRAY, _layoutCount);
			for(int __I_A=0;__I_A<_layoutCount;__I_A++) {
				daChild.setDataArray(__I_A, _layout[__I_A].writeCache());
			}
			item.putDataArray(daChild);
		}
		else {
			item.putEmpty();
		}
		da.setDataItem(sa_idx++, item);
		if(_userLocations!=null) {
			DataArray daChild = new DataArray(DataItem.DATAITEMARRAY, _userLocationsCount);
			for(int __I_A=0;__I_A<_userLocationsCount;__I_A++) {
				daChild.setDataArray(__I_A, _userLocations[__I_A].writeCache());
			}
			item.putDataArray(daChild);
		}
		else {
			item.putEmpty();
		}
		da.setDataItem(sa_idx++, item);
		if(_functionEntitlement!=null) {
			DataArray daChild = new DataArray(DataItem.DATAITEMARRAY, _functionEntitlementCount);
			for(int __I_A=0;__I_A<_functionEntitlementCount;__I_A++) {
				daChild.setDataArray(__I_A, _functionEntitlement[__I_A].writeCache());
			}
			item.putDataArray(daChild);
		}
		else {
			item.putEmpty();
		}
		da.setDataItem(sa_idx++, item);
		item.putInt(_userId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_userIdNY);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_email);
		da.setDataItem(sa_idx++, item);
		item.putInt(_defaultLocation);
		da.setDataItem(sa_idx++, item);
		item.putInt(_cacheVersion);
		da.setDataItem(sa_idx++, item);
		item.putInt(_availableLocation);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		DataArray daItem = new DataArray();
		DataArray daElement = new DataArray();
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_layoutCount = daItem.getElements();
		if(_layoutCount>0) {
			_layout = new Layout [(int)_layoutCount];
			for(int __I_A=0;__I_A<_layoutCount;__I_A++) {
				_layout[__I_A] = new Layout();
				daItem.getDataArray(__I_A, daElement);
				_layout[__I_A].readCache(daElement);
			}
		}
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_userLocationsCount = daItem.getElements();
		if(_userLocationsCount>0) {
			_userLocations = new UserLocation [(int)_userLocationsCount];
			for(int __I_A=0;__I_A<_userLocationsCount;__I_A++) {
				_userLocations[__I_A] = new UserLocation();
				daItem.getDataArray(__I_A, daElement);
				_userLocations[__I_A].readCache(daElement);
			}
		}
		in.getDataItem(sa_idx++, item);
		item.getDataArray(daItem);
		_functionEntitlementCount = daItem.getElements();
		if(_functionEntitlementCount>0) {
			_functionEntitlement = new FunctionEntitlement [(int)_functionEntitlementCount];
			for(int __I_A=0;__I_A<_functionEntitlementCount;__I_A++) {
				_functionEntitlement[__I_A] = new FunctionEntitlement();
				daItem.getDataArray(__I_A, daElement);
				_functionEntitlement[__I_A].readCache(daElement);
			}
		}
		in.getDataItem(sa_idx++, item);
		_userId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_userIdNY = item.getInt();
		in.getDataItem(sa_idx++, item);
		_email = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_defaultLocation = item.getInt();
		in.getDataItem(sa_idx++, item);
		_cacheVersion = item.getInt();
		in.getDataItem(sa_idx++, item);
		_availableLocation = item.getInt();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Layout _layout[] = null;
	private long _layoutCount = 0;
	private UserLocation _userLocations[] = null;
	private long _userLocationsCount = 0;
	private FunctionEntitlement _functionEntitlement[] = null;
	private long _functionEntitlementCount = 0;
	private int _userId;
	private int _userIdNY;
	private char[] _email;
	private int _defaultLocation;
	private int _cacheVersion;
	private int _availableLocation;
	private DataItem item = new DataItem();
}

