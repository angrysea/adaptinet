// Title:        Adjustment
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class Adjustment implements FastCacheDVOBase  {
	public Date getTradeDate() { 
		return _TradeDate;
	}
	public void setTradeDate(Date newValue) { 
		_TradeDate = newValue;
	}
	public Date getSettleDate() { 
		return _SettleDate;
	}
	public void setSettleDate(Date newValue) { 
		_SettleDate = newValue;
	}
	public Date getRequestDate() { 
		return _RequestDate;
	}
	public void setRequestDate(Date newValue) { 
		_RequestDate = newValue;
	}
	public String getAction() {
		if(_Action!=null) {
			return new String(_Action);
		}
		else {
			return null;
		}
	}
	public void setAction(String newValue) {
		_Action = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getEventId() {
		return _EventId;
	}
	public void setEventId(int newValue) {
		_EventId = newValue;
	}
	public boolean getEventIdHasError() {
		return _EventIdHasError;
	}
	public void setEventIdHasError(boolean newValue) {
		_EventIdHasError = newValue;
	}
	public String getEventIdError() {
		if(_EventIdError!=null) {
			return new String(_EventIdError);
		}
		else {
			return null;
		}
	}
	public void setEventIdError(String newValue) {
		_EventIdError = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getInstitution() {
		if(_Institution!=null) {
			return new String(_Institution);
		}
		else {
			return null;
		}
	}
	public void setInstitution(String newValue) {
		_Institution = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getFund() {
		if(_Fund!=null) {
			return new String(_Fund);
		}
		else {
			return null;
		}
	}
	public void setFund(String newValue) {
		_Fund = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getBook() {
		return _Book;
	}
	public void setBook(int newValue) {
		_Book = newValue;
	}
	public int getInstrumentId() {
		return _InstrumentId;
	}
	public void setInstrumentId(int newValue) {
		_InstrumentId = newValue;
	}
	public String getTicker() {
		if(_Ticker!=null) {
			return new String(_Ticker);
		}
		else {
			return null;
		}
	}
	public void setTicker(String newValue) {
		_Ticker = newValue!=null ? newValue.toCharArray() : null;
	}
	public boolean getTickerHasError() {
		return _TickerHasError;
	}
	public void setTickerHasError(boolean newValue) {
		_TickerHasError = newValue;
	}
	public String getTickerError() {
		if(_TickerError!=null) {
			return new String(_TickerError);
		}
		else {
			return null;
		}
	}
	public void setTickerError(String newValue) {
		_TickerError = newValue!=null ? newValue.toCharArray() : null;
	}
	public double getPrice() {
		return _Price;
	}
	public void setPrice(double newValue) {
		_Price = newValue;
	}
	public int getSwapId() {
		return _SwapId;
	}
	public void setSwapId(int newValue) {
		_SwapId = newValue;
	}
	public int getSwapNumber() {
		return _SwapNumber;
	}
	public void setSwapNumber(int newValue) {
		_SwapNumber = newValue;
	}
	public boolean getSwapNumberHasError() {
		return _SwapNumberHasError;
	}
	public void setSwapNumberHasError(boolean newValue) {
		_SwapNumberHasError = newValue;
	}
	public String getSwapNumberError() {
		if(_SwapNumberError!=null) {
			return new String(_SwapNumberError);
		}
		else {
			return null;
		}
	}
	public void setSwapNumberError(String newValue) {
		_SwapNumberError = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getTradeTypeId() {
		return _TradeTypeId;
	}
	public void setTradeTypeId(int newValue) {
		_TradeTypeId = newValue;
	}
	public String getTradeType() {
		if(_TradeType!=null) {
			return new String(_TradeType);
		}
		else {
			return null;
		}
	}
	public void setTradeType(String newValue) {
		_TradeType = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getComment() {
		if(_Comment!=null) {
			return new String(_Comment);
		}
		else {
			return null;
		}
	}
	public void setComment(String newValue) {
		_Comment = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getDetailedExplanation() {
		if(_DetailedExplanation!=null) {
			return new String(_DetailedExplanation);
		}
		else {
			return null;
		}
	}
	public void setDetailedExplanation(String newValue) {
		_DetailedExplanation = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getRep() {
		if(_Rep!=null) {
			return new String(_Rep);
		}
		else {
			return null;
		}
	}
	public void setRep(String newValue) {
		_Rep = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getTLSignOff() {
		if(_TLSignOff!=null) {
			return new String(_TLSignOff);
		}
		else {
			return null;
		}
	}
	public void setTLSignOff(String newValue) {
		_TLSignOff = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getDeskSignOff() {
		if(_DeskSignOff!=null) {
			return new String(_DeskSignOff);
		}
		else {
			return null;
		}
	}
	public void setDeskSignOff(String newValue) {
		_DeskSignOff = newValue!=null ? newValue.toCharArray() : null;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 26);
		item.putDate(_TradeDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_SettleDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_RequestDate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_Action);
		da.setDataItem(sa_idx++, item);
		item.putInt(_EventId);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_EventIdHasError);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_EventIdError);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_Institution);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_Fund);
		da.setDataItem(sa_idx++, item);
		item.putInt(_Book);
		da.setDataItem(sa_idx++, item);
		item.putInt(_InstrumentId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_Ticker);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_TickerHasError);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_TickerError);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_Price);
		da.setDataItem(sa_idx++, item);
		item.putInt(_SwapId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_SwapNumber);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_SwapNumberHasError);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_SwapNumberError);
		da.setDataItem(sa_idx++, item);
		item.putInt(_TradeTypeId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_TradeType);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_Comment);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_DetailedExplanation);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_Rep);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_TLSignOff);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_DeskSignOff);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_TradeDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_SettleDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_RequestDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_Action = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_EventId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_EventIdHasError = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_EventIdError = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_Institution = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_Fund = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_Book = item.getInt();
		in.getDataItem(sa_idx++, item);
		_InstrumentId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_Ticker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_TickerHasError = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_TickerError = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_Price = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_SwapId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_SwapNumber = item.getInt();
		in.getDataItem(sa_idx++, item);
		_SwapNumberHasError = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_SwapNumberError = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_TradeTypeId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_TradeType = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_Comment = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_DetailedExplanation = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_Rep = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_TLSignOff = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_DeskSignOff = item.getCharArray();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _TradeDate =  new Date();
	private Date _SettleDate =  new Date();
	private Date _RequestDate =  new Date();
	private char[] _Action;
	private int _EventId;
	private boolean _EventIdHasError;
	private char[] _EventIdError;
	private char[] _Institution;
	private char[] _Fund;
	private int _Book;
	private int _InstrumentId;
	private char[] _Ticker;
	private boolean _TickerHasError;
	private char[] _TickerError;
	private double _Price;
	private int _SwapId;
	private int _SwapNumber;
	private boolean _SwapNumberHasError;
	private char[] _SwapNumberError;
	private int _TradeTypeId;
	private char[] _TradeType;
	private char[] _Comment;
	private char[] _DetailedExplanation;
	private char[] _Rep;
	private char[] _TLSignOff;
	private char[] _DeskSignOff;
	private DataItem item = new DataItem();
}

