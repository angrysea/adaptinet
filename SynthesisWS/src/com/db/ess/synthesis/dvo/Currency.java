// Title:        Currency
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class Currency implements FastCacheDVOBase  {
	public int getccyId() {
		return _ccyId;
	}
	public void setccyId(int newValue) {
		_ccyId = newValue;
	}
	public String getswiftCode() {
		if(_swiftCode!=null) {
			return new String(_swiftCode);
		}
		else {
			return null;
		}
	}
	public void setswiftCode(String newValue) {
		_swiftCode = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getdecPlaces() {
		return _decPlaces;
	}
	public void setdecPlaces(int newValue) {
		_decPlaces = newValue;
	}
	public int getbasis() {
		return _basis;
	}
	public void setbasis(int newValue) {
		_basis = newValue;
	}
	public int getswapBasis() {
		return _swapBasis;
	}
	public void setswapBasis(int newValue) {
		_swapBasis = newValue;
	}
	public short getspotDays() {
		return _spotDays;
	}
	public void setspotDays(short newValue) {
		_spotDays = newValue;
	}
	public short getrounding() {
		return _rounding;
	}
	public void setrounding(short newValue) {
		_rounding = newValue;
	}
	public int getcalId() {
		return _calId;
	}
	public void setcalId(int newValue) {
		_calId = newValue;
	}
	public int getrtFeedDivisor() {
		return _rtFeedDivisor;
	}
	public void setrtFeedDivisor(int newValue) {
		_rtFeedDivisor = newValue;
	}
	public int getdisplay() {
		return _display;
	}
	public void setdisplay(int newValue) {
		_display = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 10);
		item.putInt(_ccyId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_swiftCode);
		da.setDataItem(sa_idx++, item);
		item.putInt(_decPlaces);
		da.setDataItem(sa_idx++, item);
		item.putInt(_basis);
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapBasis);
		da.setDataItem(sa_idx++, item);
		item.putShort(_spotDays);
		da.setDataItem(sa_idx++, item);
		item.putShort(_rounding);
		da.setDataItem(sa_idx++, item);
		item.putInt(_calId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_rtFeedDivisor);
		da.setDataItem(sa_idx++, item);
		item.putInt(_display);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_ccyId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swiftCode = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_decPlaces = item.getInt();
		in.getDataItem(sa_idx++, item);
		_basis = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapBasis = item.getInt();
		in.getDataItem(sa_idx++, item);
		_spotDays = item.getShort();
		in.getDataItem(sa_idx++, item);
		_rounding = item.getShort();
		in.getDataItem(sa_idx++, item);
		_calId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_rtFeedDivisor = item.getInt();
		in.getDataItem(sa_idx++, item);
		_display = item.getInt();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private int _ccyId;
	private char[] _swiftCode;
	private int _decPlaces;
	private int _basis;
	private int _swapBasis;
	private short _spotDays;
	private short _rounding;
	private int _calId;
	private int _rtFeedDivisor;
	private int _display;
	private DataItem item = new DataItem();
}

