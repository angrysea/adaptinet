// Title:        Dividend
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class Dividend implements FastCacheDVOBase  {
	public Date getexDate() { 
		return _exDate;
	}
	public void setexDate(Date newValue) { 
		_exDate = newValue;
	}
	public Date getrecDate() { 
		return _recDate;
	}
	public void setrecDate(Date newValue) { 
		_recDate = newValue;
	}
	public Date getpayDate() { 
		return _payDate;
	}
	public void setpayDate(Date newValue) { 
		_payDate = newValue;
	}
	public Date getannDate() { 
		return _annDate;
	}
	public void setannDate(Date newValue) { 
		_annDate = newValue;
	}
	public Date getupdateDateTime() { 
		return _updateDateTime;
	}
	public void setupdateDateTime(Date newValue) { 
		_updateDateTime = newValue;
	}
	public double getdivAmount() {
		return _divAmount;
	}
	public void setdivAmount(double newValue) {
		_divAmount = newValue;
	}
	public double getnetDivAmount() {
		return _netDivAmount;
	}
	public void setnetDivAmount(double newValue) {
		_netDivAmount = newValue;
	}
	public double gettaxRate() {
		return _taxRate;
	}
	public void settaxRate(double newValue) {
		_taxRate = newValue;
	}
	public String getdivCcy() {
		if(_divCcy!=null) {
			return new String(_divCcy);
		}
		else {
			return null;
		}
	}
	public void setdivCcy(String newValue) {
		_divCcy = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getindexTicker() {
		if(_indexTicker!=null) {
			return new String(_indexTicker);
		}
		else {
			return null;
		}
	}
	public void setindexTicker(String newValue) {
		_indexTicker = newValue!=null ? newValue.toCharArray() : null;
	}
	public double getindexDivisor() {
		return _indexDivisor;
	}
	public void setindexDivisor(double newValue) {
		_indexDivisor = newValue;
	}
	public double getindexIncludedPct() {
		return _indexIncludedPct;
	}
	public void setindexIncludedPct(double newValue) {
		_indexIncludedPct = newValue;
	}
	public double getindexShares() {
		return _indexShares;
	}
	public void setindexShares(double newValue) {
		_indexShares = newValue;
	}
	public double getindexInvWeight() {
		return _indexInvWeight;
	}
	public void setindexInvWeight(double newValue) {
		_indexInvWeight = newValue;
	}
	public double getindexFxRate () {
		return _indexFxRate ;
	}
	public void setindexFxRate (double newValue) {
		_indexFxRate  = newValue;
	}
	public double getunderDivAmount() {
		return _underDivAmount;
	}
	public void setunderDivAmount(double newValue) {
		_underDivAmount = newValue;
	}
	public String getunderDivCcy() {
		if(_underDivCcy!=null) {
			return new String(_underDivCcy);
		}
		else {
			return null;
		}
	}
	public void setunderDivCcy(String newValue) {
		_underDivCcy = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getdivId() {
		return _divId;
	}
	public void setdivId(int newValue) {
		_divId = newValue;
	}
	public String getfeedId() {
		if(_feedId!=null) {
			return new String(_feedId);
		}
		else {
			return null;
		}
	}
	public void setfeedId(String newValue) {
		_feedId = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getInstrId() {
		return _InstrId;
	}
	public void setInstrId(int newValue) {
		_InstrId = newValue;
	}
	public int getsynthType() {
		return _synthType;
	}
	public void setsynthType(int newValue) {
		_synthType = newValue;
	}
	public int getsynthStatus() {
		return _synthStatus;
	}
	public void setsynthStatus(int newValue) {
		_synthStatus = newValue;
	}
	public int getsynthPendingSpill() {
		return _synthPendingSpill;
	}
	public void setsynthPendingSpill(int newValue) {
		_synthPendingSpill = newValue;
	}
	public int getunderlyingId() {
		return _underlyingId;
	}
	public void setunderlyingId(int newValue) {
		_underlyingId = newValue;
	}
	public String getswapsEntitled() {
		if(_swapsEntitled!=null) {
			return new String(_swapsEntitled);
		}
		else {
			return null;
		}
	}
	public void setswapsEntitled(String newValue) {
		_swapsEntitled = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getqueueDays() {
		return _queueDays;
	}
	public void setqueueDays(int newValue) {
		_queueDays = newValue;
	}
	public String getspillStatus() {
		if(_spillStatus!=null) {
			return new String(_spillStatus);
		}
		else {
			return null;
		}
	}
	public void setspillStatus(String newValue) {
		_spillStatus = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getconstTicker() {
		if(_constTicker!=null) {
			return new String(_constTicker);
		}
		else {
			return null;
		}
	}
	public void setconstTicker(String newValue) {
		_constTicker = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getdivSource() {
		if(_divSource!=null) {
			return new String(_divSource);
		}
		else {
			return null;
		}
	}
	public void setdivSource(String newValue) {
		_divSource = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getcomment() {
		if(_comment!=null) {
			return new String(_comment);
		}
		else {
			return null;
		}
	}
	public void setcomment(String newValue) {
		_comment = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getessLocation() {
		if(_essLocation!=null) {
			return new String(_essLocation);
		}
		else {
			return null;
		}
	}
	public void setessLocation(String newValue) {
		_essLocation = newValue!=null ? newValue.toCharArray() : null;
	}
	public String gettype() {
		if(_type!=null) {
			return new String(_type);
		}
		else {
			return null;
		}
	}
	public void settype(String newValue) {
		_type = newValue!=null ? newValue.toCharArray() : null;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 32);
		item.putDate(_exDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_recDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_payDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_annDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_updateDateTime);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_divAmount);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_netDivAmount);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_taxRate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_divCcy);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_indexTicker);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_indexDivisor);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_indexIncludedPct);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_indexShares);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_indexInvWeight);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_indexFxRate );
		da.setDataItem(sa_idx++, item);
		item.putDouble(_underDivAmount);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_underDivCcy);
		da.setDataItem(sa_idx++, item);
		item.putInt(_divId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_feedId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_InstrId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_synthType);
		da.setDataItem(sa_idx++, item);
		item.putInt(_synthStatus);
		da.setDataItem(sa_idx++, item);
		item.putInt(_synthPendingSpill);
		da.setDataItem(sa_idx++, item);
		item.putInt(_underlyingId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_swapsEntitled);
		da.setDataItem(sa_idx++, item);
		item.putInt(_queueDays);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_spillStatus);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_constTicker);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_divSource);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_comment);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_essLocation);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_type);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_exDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_recDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_payDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_annDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_updateDateTime = item.getDate();
		in.getDataItem(sa_idx++, item);
		_divAmount = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_netDivAmount = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_taxRate = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_divCcy = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_indexTicker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_indexDivisor = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_indexIncludedPct = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_indexShares = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_indexInvWeight = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_indexFxRate  = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_underDivAmount = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_underDivCcy = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_divId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_feedId = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_InstrId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_synthType = item.getInt();
		in.getDataItem(sa_idx++, item);
		_synthStatus = item.getInt();
		in.getDataItem(sa_idx++, item);
		_synthPendingSpill = item.getInt();
		in.getDataItem(sa_idx++, item);
		_underlyingId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapsEntitled = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_queueDays = item.getInt();
		in.getDataItem(sa_idx++, item);
		_spillStatus = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_constTicker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_divSource = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_comment = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_essLocation = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_type = item.getCharArray();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _exDate =  new Date();
	private Date _recDate =  new Date();
	private Date _payDate =  new Date();
	private Date _annDate =  new Date();
	private Date _updateDateTime =  new Date();
	private double _divAmount;
	private double _netDivAmount;
	private double _taxRate;
	private char[] _divCcy;
	private char[] _indexTicker;
	private double _indexDivisor;
	private double _indexIncludedPct;
	private double _indexShares;
	private double _indexInvWeight;
	private double _indexFxRate ;
	private double _underDivAmount;
	private char[] _underDivCcy;
	private int _divId;
	private char[] _feedId;
	private int _InstrId;
	private int _synthType;
	private int _synthStatus;
	private int _synthPendingSpill;
	private int _underlyingId;
	private char[] _swapsEntitled;
	private int _queueDays;
	private char[] _spillStatus;
	private char[] _constTicker;
	private char[] _divSource;
	private char[] _comment;
	private char[] _essLocation;
	private char[] _type;
	private DataItem item = new DataItem();
}

