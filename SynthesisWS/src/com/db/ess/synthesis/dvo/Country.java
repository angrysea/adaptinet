// Title:        Country
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class Country implements FastCacheDVOBase  {
	public int getcountryId() {
		return _countryId;
	}
	public void setcountryId(int newValue) {
		_countryId = newValue;
	}
	public String getcode() {
		if(_code!=null) {
			return new String(_code);
		}
		else {
			return null;
		}
	}
	public void setcode(String newValue) {
		_code = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getdescription() {
		if(_description!=null) {
			return new String(_description);
		}
		else {
			return null;
		}
	}
	public void setdescription(String newValue) {
		_description = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getccyId() {
		return _ccyId;
	}
	public void setccyId(int newValue) {
		_ccyId = newValue;
	}
	public float gettaxRate() {
		return _taxRate;
	}
	public void settaxRate(float newValue) {
		_taxRate = newValue;
	}
	public double getmanualCommission() {
		return _manualCommission;
	}
	public void setmanualCommission(double newValue) {
		_manualCommission = newValue;
	}
	public double getremoteCommission() {
		return _remoteCommission;
	}
	public void setremoteCommission(double newValue) {
		_remoteCommission = newValue;
	}
	public short getdivTreatment() {
		return _divTreatment;
	}
	public void setdivTreatment(short newValue) {
		_divTreatment = newValue;
	}
	public double getstoxxNet() {
		return _stoxxNet;
	}
	public void setstoxxNet(double newValue) {
		_stoxxNet = newValue;
	}
	public double getstoxxGross() {
		return _stoxxGross;
	}
	public void setstoxxGross(double newValue) {
		_stoxxGross = newValue;
	}
	public int getcalId() {
		return _calId;
	}
	public void setcalId(int newValue) {
		_calId = newValue;
	}
	public short getzone() {
		return _zone;
	}
	public void setzone(short newValue) {
		_zone = newValue;
	}
	public int getdays() {
		return _days;
	}
	public void setdays(int newValue) {
		_days = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 13);
		item.putInt(_countryId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_code);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_description);
		da.setDataItem(sa_idx++, item);
		item.putInt(_ccyId);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_taxRate);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_manualCommission);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_remoteCommission);
		da.setDataItem(sa_idx++, item);
		item.putShort(_divTreatment);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_stoxxNet);
		da.setDataItem(sa_idx++, item);
		item.putDouble(_stoxxGross);
		da.setDataItem(sa_idx++, item);
		item.putInt(_calId);
		da.setDataItem(sa_idx++, item);
		item.putShort(_zone);
		da.setDataItem(sa_idx++, item);
		item.putInt(_days);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_countryId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_code = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_description = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_ccyId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_taxRate = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_manualCommission = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_remoteCommission = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_divTreatment = item.getShort();
		in.getDataItem(sa_idx++, item);
		_stoxxNet = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_stoxxGross = item.getDouble();
		in.getDataItem(sa_idx++, item);
		_calId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_zone = item.getShort();
		in.getDataItem(sa_idx++, item);
		_days = item.getInt();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private int _countryId;
	private char[] _code;
	private char[] _description;
	private int _ccyId;
	private float _taxRate;
	private double _manualCommission;
	private double _remoteCommission;
	private short _divTreatment;
	private double _stoxxNet;
	private double _stoxxGross;
	private int _calId;
	private short _zone;
	private int _days;
	private DataItem item = new DataItem();
}

