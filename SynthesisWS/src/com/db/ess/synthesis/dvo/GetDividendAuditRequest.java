// Title:        GetDividendAuditRequest
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class GetDividendAuditRequest implements FastCacheDVOBase  {
	public Date getauditFromDate() { 
		return _auditFromDate;
	}
	public void setauditFromDate(Date newValue) { 
		_auditFromDate = newValue;
	}
	public Date getauditToDate() { 
		return _auditToDate;
	}
	public void setauditToDate(Date newValue) { 
		_auditToDate = newValue;
	}
	public String getticker() {
		if(_ticker!=null) {
			return new String(_ticker);
		}
		else {
			return null;
		}
	}
	public void setticker(String newValue) {
		_ticker = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getuserId() {
		return _userId;
	}
	public void setuserId(int newValue) {
		_userId = newValue;
	}
	public String getfeedId() {
		if(_feedId!=null) {
			return new String(_feedId);
		}
		else {
			return null;
		}
	}
	public void setfeedId(String newValue) {
		_feedId = newValue!=null ? newValue.toCharArray() : null;
	}
	public Date getenterTime() {
		return _enterTime;
	}
	public void setenterTime(Date newValue) {
		_enterTime = newValue;
	}
	public int getlocation() {
		return _location;
	}
	public void setlocation(int newValue) {
		_location = newValue;
	}
	public String getunderTicker() {
		if(_underTicker!=null) {
			return new String(_underTicker);
		}
		else {
			return null;
		}
	}
	public void setunderTicker(String newValue) {
		_underTicker = newValue!=null ? newValue.toCharArray() : null;
	}
	public Date getexDate() {
		return _exDate;
	}
	public void setexDate(Date newValue) {
		_exDate = newValue;
	}
	public boolean getbyDate() {
		return _byDate;
	}
	public void setbyDate(boolean newValue) {
		_byDate = newValue;
	}
	public boolean getbyTicker() {
		return _byTicker;
	}
	public void setbyTicker(boolean newValue) {
		_byTicker = newValue;
	}
	public boolean getbyDefault() {
		return _byDefault;
	}
	public void setbyDefault(boolean newValue) {
		_byDefault = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 12);
		item.putDate(_auditFromDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_auditToDate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ticker);
		da.setDataItem(sa_idx++, item);
		item.putInt(_userId);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_feedId);
		da.setDataItem(sa_idx++, item);
		item.putDate(_enterTime);
		da.setDataItem(sa_idx++, item);
		item.putInt(_location);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_underTicker);
		da.setDataItem(sa_idx++, item);
		item.putDate(_exDate);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_byDate);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_byTicker);
		da.setDataItem(sa_idx++, item);
		item.putBoolean(_byDefault);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_auditFromDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_auditToDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_ticker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_userId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_feedId = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_enterTime = item.getDate();
		in.getDataItem(sa_idx++, item);
		_location = item.getInt();
		in.getDataItem(sa_idx++, item);
		_underTicker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_exDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_byDate = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_byTicker = item.getBoolean();
		in.getDataItem(sa_idx++, item);
		_byDefault = item.getBoolean();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _auditFromDate =  new Date();
	private Date _auditToDate =  new Date();
	private char[] _ticker;
	private int _userId;
	private char[] _feedId;
	private Date _enterTime;
	private int _location;
	private char[] _underTicker;
	private Date _exDate;
	private boolean _byDate;
	private boolean _byTicker;
	private boolean _byDefault;
	private DataItem item = new DataItem();
}

