// Title:        AltDivCcyAudit
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class AltDivCcyAudit implements FastCacheDVOBase  {
	public Date getexDate() { 
		return _exDate;
	}
	public void setexDate(Date newValue) { 
		_exDate = newValue;
	}
	public Date getrecordDate() { 
		return _recordDate;
	}
	public void setrecordDate(Date newValue) { 
		_recordDate = newValue;
	}
	public Date getpaymentDate() { 
		return _paymentDate;
	}
	public void setpaymentDate(Date newValue) { 
		_paymentDate = newValue;
	}
	public Date getchangeCreateTime() { 
		return _changeCreateTime;
	}
	public void setchangeCreateTime(Date newValue) { 
		_changeCreateTime = newValue;
	}
	public Date getchangeApplyTime() { 
		return _changeApplyTime;
	}
	public void setchangeApplyTime(Date newValue) { 
		_changeApplyTime = newValue;
	}
	public String getunderlyingTicker() {
		if(_underlyingTicker!=null) {
			return new String(_underlyingTicker);
		}
		else {
			return null;
		}
	}
	public void setunderlyingTicker(String newValue) {
		_underlyingTicker = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getticker() {
		if(_ticker!=null) {
			return new String(_ticker);
		}
		else {
			return null;
		}
	}
	public void setticker(String newValue) {
		_ticker = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getdivCcy() {
		if(_divCcy!=null) {
			return new String(_divCcy);
		}
		else {
			return null;
		}
	}
	public void setdivCcy(String newValue) {
		_divCcy = newValue!=null ? newValue.toCharArray() : null;
	}
	public float getdivCcyGrossRate() {
		return _divCcyGrossRate;
	}
	public void setdivCcyGrossRate(float newValue) {
		_divCcyGrossRate = newValue;
	}
	public float getdivCcyNetRate() {
		return _divCcyNetRate;
	}
	public void setdivCcyNetRate(float newValue) {
		_divCcyNetRate = newValue;
	}
	public String getaltDivCcy() {
		if(_altDivCcy!=null) {
			return new String(_altDivCcy);
		}
		else {
			return null;
		}
	}
	public void setaltDivCcy(String newValue) {
		_altDivCcy = newValue!=null ? newValue.toCharArray() : null;
	}
	public float getaltDivCcyGrossRate() {
		return _altDivCcyGrossRate;
	}
	public void setaltDivCcyGrossRate(float newValue) {
		_altDivCcyGrossRate = newValue;
	}
	public float getaltDivCcyNetRate() {
		return _altDivCcyNetRate;
	}
	public void setaltDivCcyNetRate(float newValue) {
		_altDivCcyNetRate = newValue;
	}
	public String getuserIdCreate() {
		if(_userIdCreate!=null) {
			return new String(_userIdCreate);
		}
		else {
			return null;
		}
	}
	public void setuserIdCreate(String newValue) {
		_userIdCreate = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getuserIdApply() {
		if(_userIdApply!=null) {
			return new String(_userIdApply);
		}
		else {
			return null;
		}
	}
	public void setuserIdApply(String newValue) {
		_userIdApply = newValue!=null ? newValue.toCharArray() : null;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 15);
		item.putDate(_exDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_recordDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_paymentDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_changeCreateTime);
		da.setDataItem(sa_idx++, item);
		item.putDate(_changeApplyTime);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_underlyingTicker);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ticker);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_divCcy);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_divCcyGrossRate);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_divCcyNetRate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_altDivCcy);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_altDivCcyGrossRate);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_altDivCcyNetRate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_userIdCreate);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_userIdApply);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_exDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_recordDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_paymentDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_changeCreateTime = item.getDate();
		in.getDataItem(sa_idx++, item);
		_changeApplyTime = item.getDate();
		in.getDataItem(sa_idx++, item);
		_underlyingTicker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_ticker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_divCcy = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_divCcyGrossRate = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_divCcyNetRate = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_altDivCcy = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_altDivCcyGrossRate = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_altDivCcyNetRate = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_userIdCreate = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_userIdApply = item.getCharArray();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _exDate =  new Date();
	private Date _recordDate =  new Date();
	private Date _paymentDate =  new Date();
	private Date _changeCreateTime =  new Date();
	private Date _changeApplyTime =  new Date();
	private char[] _underlyingTicker;
	private char[] _ticker;
	private char[] _divCcy;
	private float _divCcyGrossRate;
	private float _divCcyNetRate;
	private char[] _altDivCcy;
	private float _altDivCcyGrossRate;
	private float _altDivCcyNetRate;
	private char[] _userIdCreate;
	private char[] _userIdApply;
	private DataItem item = new DataItem();
}

