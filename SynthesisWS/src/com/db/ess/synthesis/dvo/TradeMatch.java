// Title:        TradeMatch
// Author:       Generate code
// Company:      
// Description:  This class was generated by the XML-Broker Developer Console
// Schema name:  /home/anthony/workspace/SynthesisWS/schema/Synthesis.xsd
// Java SDK:     

package com.db.ess.synthesis.dvo;

import java.util.Date;
import java.io.IOException;

import org.adaptinet.sdk.adaptinetex.FastCacheException;
import org.adaptinet.sdk.fastcache.CacheServer;
import org.adaptinet.sdk.fastcache.DataArray;
import org.adaptinet.sdk.fastcache.DataItem;
import org.adaptinet.sdk.fastcache.FastCacheDVOBase;

public class TradeMatch implements FastCacheDVOBase  {
	public Date gettradeDate() { 
		return _tradeDate;
	}
	public void settradeDate(Date newValue) { 
		_tradeDate = newValue;
	}
	public Date getmatchSettleDate() { 
		return _matchSettleDate;
	}
	public void setmatchSettleDate(Date newValue) { 
		_matchSettleDate = newValue;
	}
	public int getswapId() {
		return _swapId;
	}
	public void setswapId(int newValue) {
		_swapId = newValue;
	}
	public int getswapNumber() {
		return _swapNumber;
	}
	public void setswapNumber(int newValue) {
		_swapNumber = newValue;
	}
	public int getcustomerId() {
		return _customerId;
	}
	public void setcustomerId(int newValue) {
		_customerId = newValue;
	}
	public int getbookId() {
		return _bookId;
	}
	public void setbookId(int newValue) {
		_bookId = newValue;
	}
	public int getlegId() {
		return _legId;
	}
	public void setlegId(int newValue) {
		_legId = newValue;
	}
	public int geteventId() {
		return _eventId;
	}
	public void seteventId(int newValue) {
		_eventId = newValue;
	}
	public int getinstrId() {
		return _instrId;
	}
	public void setinstrId(int newValue) {
		_instrId = newValue;
	}
	public int getinstitutionId() {
		return _institutionId;
	}
	public void setinstitutionId(int newValue) {
		_institutionId = newValue;
	}
	public float getquantity() {
		return _quantity;
	}
	public void setquantity(float newValue) {
		_quantity = newValue;
	}
	public float getpriceBaseCcy () {
		return _priceBaseCcy ;
	}
	public void setpriceBaseCcy (float newValue) {
		_priceBaseCcy  = newValue;
	}
	public float getpricePayCcy() {
		return _pricePayCcy;
	}
	public void setpricePayCcy(float newValue) {
		_pricePayCcy = newValue;
	}
	public String getbookName() {
		if(_bookName!=null) {
			return new String(_bookName);
		}
		else {
			return null;
		}
	}
	public void setbookName(String newValue) {
		_bookName = newValue!=null ? newValue.toCharArray() : null;
	}
	public String getticker() {
		if(_ticker!=null) {
			return new String(_ticker);
		}
		else {
			return null;
		}
	}
	public void setticker(String newValue) {
		_ticker = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getmatchId() {
		return _matchId;
	}
	public void setmatchId(int newValue) {
		_matchId = newValue;
	}
	public int geteventIdMatch() {
		return _eventIdMatch;
	}
	public void seteventIdMatch(int newValue) {
		_eventIdMatch = newValue;
	}
	public float getmatchQty() {
		return _matchQty;
	}
	public void setmatchQty(float newValue) {
		_matchQty = newValue;
	}
	public float getmatchRealizedAmt() {
		return _matchRealizedAmt;
	}
	public void setmatchRealizedAmt(float newValue) {
		_matchRealizedAmt = newValue;
	}
	public float getmatchRealizedAmtBase() {
		return _matchRealizedAmtBase;
	}
	public void setmatchRealizedAmtBase(float newValue) {
		_matchRealizedAmtBase = newValue;
	}
	public float getmatchAvgCost() {
		return _matchAvgCost;
	}
	public void setmatchAvgCost(float newValue) {
		_matchAvgCost = newValue;
	}
	public float getmatchAvgCostBase() {
		return _matchAvgCostBase;
	}
	public void setmatchAvgCostBase(float newValue) {
		_matchAvgCostBase = newValue;
	}
	public String getmatchAccountMethod() {
		if(_matchAccountMethod!=null) {
			return new String(_matchAccountMethod);
		}
		else {
			return null;
		}
	}
	public void setmatchAccountMethod(String newValue) {
		_matchAccountMethod = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getmatchType() {
		return _matchType;
	}
	public void setmatchType(int newValue) {
		_matchType = newValue;
	}
	public String getinstitutionName() {
		if(_institutionName!=null) {
			return new String(_institutionName);
		}
		else {
			return null;
		}
	}
	public void setinstitutionName(String newValue) {
		_institutionName = newValue!=null ? newValue.toCharArray() : null;
	}
	public int getlotAge() {
		return _lotAge;
	}
	public void setlotAge(int newValue) {
		_lotAge = newValue;
	}
	public void putToCache(String key, CacheServer server) throws FastCacheException {
		DataArray da = writeCache();
		item.putDataArray(da);
		server.putValue(key, item);
		item.DataItemClear();
	}
	public void getFromCache(String key, CacheServer server) throws FastCacheException {
		DataItem item = server.getValue(key);
		DataArray da = new DataArray();
		item.getDataArray(da);
		readCache(da);
		item.DataItemClear();
	}
	public DataArray writeCache() throws FastCacheException {
		int sa_idx = 0;
		DataArray da = new DataArray(DataItem.DATAITEMDATAITEM, 26);
		item.putDate(_tradeDate);
		da.setDataItem(sa_idx++, item);
		item.putDate(_matchSettleDate);
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_swapNumber);
		da.setDataItem(sa_idx++, item);
		item.putInt(_customerId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_bookId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_legId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_eventId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_instrId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_institutionId);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_quantity);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_priceBaseCcy );
		da.setDataItem(sa_idx++, item);
		item.putFloat(_pricePayCcy);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_bookName);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_ticker);
		da.setDataItem(sa_idx++, item);
		item.putInt(_matchId);
		da.setDataItem(sa_idx++, item);
		item.putInt(_eventIdMatch);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_matchQty);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_matchRealizedAmt);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_matchRealizedAmtBase);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_matchAvgCost);
		da.setDataItem(sa_idx++, item);
		item.putFloat(_matchAvgCostBase);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_matchAccountMethod);
		da.setDataItem(sa_idx++, item);
		item.putInt(_matchType);
		da.setDataItem(sa_idx++, item);
		item.putCharArray(_institutionName);
		da.setDataItem(sa_idx++, item);
		item.putInt(_lotAge);
		da.setDataItem(sa_idx++, item);
		item.DataItemClear();
		return da;
	}
	public void readCache(DataArray in) throws FastCacheException {
		int sa_idx = 0;
		in.getDataItem(sa_idx++, item);
		_tradeDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_matchSettleDate = item.getDate();
		in.getDataItem(sa_idx++, item);
		_swapId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_swapNumber = item.getInt();
		in.getDataItem(sa_idx++, item);
		_customerId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_bookId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_legId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_eventId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_instrId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_institutionId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_quantity = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_priceBaseCcy  = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_pricePayCcy = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_bookName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_ticker = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_matchId = item.getInt();
		in.getDataItem(sa_idx++, item);
		_eventIdMatch = item.getInt();
		in.getDataItem(sa_idx++, item);
		_matchQty = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_matchRealizedAmt = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_matchRealizedAmtBase = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_matchAvgCost = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_matchAvgCostBase = item.getFloat();
		in.getDataItem(sa_idx++, item);
		_matchAccountMethod = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_matchType = item.getInt();
		in.getDataItem(sa_idx++, item);
		_institutionName = item.getCharArray();
		in.getDataItem(sa_idx++, item);
		_lotAge = item.getInt();
	}
	public void writeObject(byte [] data) throws FastCacheException {
		item.writeObject(data);
		DataArray in = new DataArray();
		item.getDataArray(in);
		readCache(in);
	}
	public byte [] readObject() throws FastCacheException, IOException {
		DataArray requestDA = writeCache();
		item.putDataArray(requestDA);
		return item.readObject();
	}
	private Date _tradeDate =  new Date();
	private Date _matchSettleDate =  new Date();
	private int _swapId;
	private int _swapNumber;
	private int _customerId;
	private int _bookId;
	private int _legId;
	private int _eventId;
	private int _instrId;
	private int _institutionId;
	private float _quantity;
	private float _priceBaseCcy ;
	private float _pricePayCcy;
	private char[] _bookName;
	private char[] _ticker;
	private int _matchId;
	private int _eventIdMatch;
	private float _matchQty;
	private float _matchRealizedAmt;
	private float _matchRealizedAmtBase;
	private float _matchAvgCost;
	private float _matchAvgCostBase;
	private char[] _matchAccountMethod;
	private int _matchType;
	private char[] _institutionName;
	private int _lotAge;
	private DataItem item = new DataItem();
}

